//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Microsoft.Example.Circuits
{
	/// <summary>
	/// DomainRelationship ComponentModelHasComments
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.ComponentModelHasComments.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Example.Circuits.ComponentModelHasComments.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("6743d47b-89db-45e4-89cb-64baa3372aae")]
	public partial class ComponentModelHasComments : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ComponentModelHasComments domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6743d47b, 0x89db, 0x45e4, 0x89, 0xcb, 0x64, 0xba, 0xa3, 0x37, 0x2a, 0xae);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ComponentModelHasComments link in the same Partition as the given ComponentModel
		/// </summary>
		/// <param name="source">ComponentModel to use as the source of the relationship.</param>
		/// <param name="target">Comment to use as the target of the relationship.</param>
		public ComponentModelHasComments(ComponentModel source, Comment target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ComponentModelHasComments.ComponentModelDomainRoleId, source), new DslModeling::RoleAssignment(ComponentModelHasComments.CommentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ComponentModelHasComments(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ComponentModelHasComments(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ComponentModelHasComments(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ComponentModelHasComments(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ComponentModel domain role code
		
		/// <summary>
		/// ComponentModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ComponentModelDomainRoleId = new global::System.Guid(0x22ab9777, 0xe032, 0x4dcb, 0xaa, 0xd3, 0x9a, 0xe4, 0x5b, 0x6b, 0x98, 0xaf);
		
		/// <summary>
		/// DomainRole ComponentModel
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.ComponentModelHasComments/ComponentModel.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Example.Circuits.ComponentModelHasComments/ComponentModel.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Comments", PropertyDisplayNameKey="Microsoft.Example.Circuits.ComponentModelHasComments/ComponentModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("22ab9777-e032-4dcb-aad3-9ae45b6b98af")]
		public virtual ComponentModel ComponentModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ComponentModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ComponentModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ComponentModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ComponentModel of a Comment
		/// <summary>
		/// Gets ComponentModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ComponentModel GetComponentModel(Comment element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CommentDomainRoleId) as ComponentModel;
		}
		
		/// <summary>
		/// Sets ComponentModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetComponentModel(Comment element, ComponentModel newComponentModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CommentDomainRoleId, newComponentModel);
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0x65706759, 0xf58a, 0x4e50, 0x98, 0x06, 0xb8, 0xd7, 0xd7, 0x6f, 0x88, 0x7a);
		
		/// <summary>
		/// DomainRole Comment
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.ComponentModelHasComments/Comment.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Example.Circuits.ComponentModelHasComments/Comment.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ComponentModel", PropertyDisplayNameKey="Microsoft.Example.Circuits.ComponentModelHasComments/Comment.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("65706759-f58a-4e50-9806-b8d7d76f887a")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a ComponentModel
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(ComponentModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, ComponentModelDomainRoleId);
		}
		#endregion
		#region ComponentModel link accessor
		/// <summary>
		/// Get the list of ComponentModelHasComments links to a ComponentModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Example.Circuits.ComponentModelHasComments> GetLinksToComments ( global::Microsoft.Example.Circuits.ComponentModel componentModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.ComponentModelHasComments>(componentModelInstance, global::Microsoft.Example.Circuits.ComponentModelHasComments.ComponentModelDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the ComponentModelHasComments link to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Example.Circuits.ComponentModelHasComments GetLinkToComponentModel (global::Microsoft.Example.Circuits.Comment commentInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.ComponentModelHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.ComponentModelHasComments>(commentInstance, global::Microsoft.Example.Circuits.ComponentModelHasComments.CommentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Comment not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ComponentModelHasComments instance accessors
		
		/// <summary>
		/// Get any ComponentModelHasComments links between a given ComponentModel and a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Example.Circuits.ComponentModelHasComments> GetLinks( global::Microsoft.Example.Circuits.ComponentModel source, global::Microsoft.Example.Circuits.Comment target )
		{
			global::System.Collections.Generic.List<global::Microsoft.Example.Circuits.ComponentModelHasComments> outLinks = new global::System.Collections.Generic.List<global::Microsoft.Example.Circuits.ComponentModelHasComments>();
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.ComponentModelHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.ComponentModelHasComments>(source, global::Microsoft.Example.Circuits.ComponentModelHasComments.ComponentModelDomainRoleId);
			foreach ( global::Microsoft.Example.Circuits.ComponentModelHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ComponentModelHasComments link between a given ComponentModeland a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Example.Circuits.ComponentModelHasComments GetLink( global::Microsoft.Example.Circuits.ComponentModel source, global::Microsoft.Example.Circuits.Comment target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.ComponentModelHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.ComponentModelHasComments>(source, global::Microsoft.Example.Circuits.ComponentModelHasComments.ComponentModelDomainRoleId);
			foreach ( global::Microsoft.Example.Circuits.ComponentModelHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.Example.Circuits
{
	/// <summary>
	/// DomainRelationship ComponentModelHasComponents
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.ComponentModelHasComponents.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Example.Circuits.ComponentModelHasComponents.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("84cea95a-2306-4d81-b7d5-474fa5a57fd9")]
	public partial class ComponentModelHasComponents : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ComponentModelHasComponents domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x84cea95a, 0x2306, 0x4d81, 0xb7, 0xd5, 0x47, 0x4f, 0xa5, 0xa5, 0x7f, 0xd9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ComponentModelHasComponents link in the same Partition as the given ComponentModel
		/// </summary>
		/// <param name="source">ComponentModel to use as the source of the relationship.</param>
		/// <param name="target">Component to use as the target of the relationship.</param>
		public ComponentModelHasComponents(ComponentModel source, Component target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ComponentModelHasComponents.ComponentModelDomainRoleId, source), new DslModeling::RoleAssignment(ComponentModelHasComponents.ComponentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ComponentModelHasComponents(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ComponentModelHasComponents(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ComponentModelHasComponents(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ComponentModelHasComponents(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ComponentModel domain role code
		
		/// <summary>
		/// ComponentModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ComponentModelDomainRoleId = new global::System.Guid(0xfcddbe78, 0x5744, 0x4d7b, 0xa8, 0xc4, 0x6c, 0xbe, 0x1f, 0xf6, 0x1c, 0xce);
		
		/// <summary>
		/// DomainRole ComponentModel
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.ComponentModelHasComponents/ComponentModel.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Example.Circuits.ComponentModelHasComponents/ComponentModel.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Components", PropertyDisplayNameKey="Microsoft.Example.Circuits.ComponentModelHasComponents/ComponentModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("fcddbe78-5744-4d7b-a8c4-6cbe1ff61cce")]
		public virtual ComponentModel ComponentModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ComponentModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ComponentModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ComponentModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ComponentModel of a Component
		/// <summary>
		/// Gets ComponentModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ComponentModel GetComponentModel(Component element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ComponentDomainRoleId) as ComponentModel;
		}
		
		/// <summary>
		/// Sets ComponentModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetComponentModel(Component element, ComponentModel newComponentModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ComponentDomainRoleId, newComponentModel);
		}
		#endregion
		#region Component domain role code
		
		/// <summary>
		/// Component domain role Id.
		/// </summary>
		public static readonly global::System.Guid ComponentDomainRoleId = new global::System.Guid(0x25fef9df, 0xb0c9, 0x412f, 0xa9, 0xa6, 0xb1, 0x55, 0xdf, 0x27, 0xc7, 0x51);
		
		/// <summary>
		/// DomainRole Component
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.ComponentModelHasComponents/Component.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Example.Circuits.ComponentModelHasComponents/Component.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ComponentModel", PropertyDisplayNameKey="Microsoft.Example.Circuits.ComponentModelHasComponents/Component.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("25fef9df-b0c9-412f-a9a6-b155df27c751")]
		public virtual Component Component
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Component)DslModeling::DomainRoleInfo.GetRolePlayer(this, ComponentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ComponentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Components of a ComponentModel
		/// <summary>
		/// Gets a list of Components.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Component> GetComponents(ComponentModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Component>, Component>(element, ComponentModelDomainRoleId);
		}
		#endregion
		#region ComponentModel link accessor
		/// <summary>
		/// Get the list of ComponentModelHasComponents links to a ComponentModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Example.Circuits.ComponentModelHasComponents> GetLinksToComponents ( global::Microsoft.Example.Circuits.ComponentModel componentModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.ComponentModelHasComponents>(componentModelInstance, global::Microsoft.Example.Circuits.ComponentModelHasComponents.ComponentModelDomainRoleId);
		}
		#endregion
		#region Component link accessor
		/// <summary>
		/// Get the ComponentModelHasComponents link to a Component.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Example.Circuits.ComponentModelHasComponents GetLinkToComponentModel (global::Microsoft.Example.Circuits.Component componentInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.ComponentModelHasComponents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.ComponentModelHasComponents>(componentInstance, global::Microsoft.Example.Circuits.ComponentModelHasComponents.ComponentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Component not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ComponentModelHasComponents instance accessors
		
		/// <summary>
		/// Get any ComponentModelHasComponents links between a given ComponentModel and a Component.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Example.Circuits.ComponentModelHasComponents> GetLinks( global::Microsoft.Example.Circuits.ComponentModel source, global::Microsoft.Example.Circuits.Component target )
		{
			global::System.Collections.Generic.List<global::Microsoft.Example.Circuits.ComponentModelHasComponents> outLinks = new global::System.Collections.Generic.List<global::Microsoft.Example.Circuits.ComponentModelHasComponents>();
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.ComponentModelHasComponents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.ComponentModelHasComponents>(source, global::Microsoft.Example.Circuits.ComponentModelHasComponents.ComponentModelDomainRoleId);
			foreach ( global::Microsoft.Example.Circuits.ComponentModelHasComponents link in links )
			{
				if ( target.Equals(link.Component) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ComponentModelHasComponents link between a given ComponentModeland a Component.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Example.Circuits.ComponentModelHasComponents GetLink( global::Microsoft.Example.Circuits.ComponentModel source, global::Microsoft.Example.Circuits.Component target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.ComponentModelHasComponents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.ComponentModelHasComponents>(source, global::Microsoft.Example.Circuits.ComponentModelHasComponents.ComponentModelDomainRoleId);
			foreach ( global::Microsoft.Example.Circuits.ComponentModelHasComponents link in links )
			{
				if ( target.Equals(link.Component) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.Example.Circuits
{
	/// <summary>
	/// DomainRelationship CommentsReferenceComponents
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.CommentsReferenceComponents.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Example.Circuits.CommentsReferenceComponents.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("47946380-4f7b-408a-848f-d5334cd75407")]
	public partial class CommentsReferenceComponents : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CommentsReferenceComponents domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x47946380, 0x4f7b, 0x408a, 0x84, 0x8f, 0xd5, 0x33, 0x4c, 0xd7, 0x54, 0x07);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CommentsReferenceComponents link in the same Partition as the given Comment
		/// </summary>
		/// <param name="source">Comment to use as the source of the relationship.</param>
		/// <param name="target">Component to use as the target of the relationship.</param>
		public CommentsReferenceComponents(Comment source, Component target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CommentsReferenceComponents.CommentDomainRoleId, source), new DslModeling::RoleAssignment(CommentsReferenceComponents.SubjectDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentsReferenceComponents(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentsReferenceComponents(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentsReferenceComponents(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentsReferenceComponents(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0xb36d2173, 0x8533, 0x440e, 0xb1, 0x27, 0x16, 0xa9, 0x96, 0x1e, 0xd9, 0xf1);
		
		/// <summary>
		/// DomainRole Comment
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.CommentsReferenceComponents/Comment.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Example.Circuits.CommentsReferenceComponents/Comment.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Subjects", PropertyDisplayNameKey="Microsoft.Example.Circuits.CommentsReferenceComponents/Comment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b36d2173-8533-440e-b127-16a9961ed9f1")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a Component
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(Component element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, SubjectDomainRoleId);
		}
		#endregion
		#region Subject domain role code
		
		/// <summary>
		/// Subject domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubjectDomainRoleId = new global::System.Guid(0xd7b121d9, 0x2c1e, 0x4f59, 0x9c, 0xf6, 0x9a, 0x47, 0x15, 0x22, 0x62, 0x79);
		
		/// <summary>
		/// DomainRole Subject
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.CommentsReferenceComponents/Subject.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Example.Circuits.CommentsReferenceComponents/Subject.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Comments", PropertyDisplayNameKey="Microsoft.Example.Circuits.CommentsReferenceComponents/Subject.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d7b121d9-2c1e-4f59-9cf6-9a4715226279")]
		public virtual Component Subject
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Component)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubjectDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubjectDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subjects of a Comment
		/// <summary>
		/// Gets a list of Subjects.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Component> GetSubjects(Comment element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Component>, Component>(element, CommentDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the list of CommentsReferenceComponents links to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Example.Circuits.CommentsReferenceComponents> GetLinksToSubjects ( global::Microsoft.Example.Circuits.Comment commentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.CommentsReferenceComponents>(commentInstance, global::Microsoft.Example.Circuits.CommentsReferenceComponents.CommentDomainRoleId);
		}
		#endregion
		#region Subject link accessor
		/// <summary>
		/// Get the list of CommentsReferenceComponents links to a Component.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Example.Circuits.CommentsReferenceComponents> GetLinksToComments ( global::Microsoft.Example.Circuits.Component subjectInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.CommentsReferenceComponents>(subjectInstance, global::Microsoft.Example.Circuits.CommentsReferenceComponents.SubjectDomainRoleId);
		}
		#endregion
		#region CommentsReferenceComponents instance accessors
		
		/// <summary>
		/// Get any CommentsReferenceComponents links between a given Comment and a Component.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Example.Circuits.CommentsReferenceComponents> GetLinks( global::Microsoft.Example.Circuits.Comment source, global::Microsoft.Example.Circuits.Component target )
		{
			global::System.Collections.Generic.List<global::Microsoft.Example.Circuits.CommentsReferenceComponents> outLinks = new global::System.Collections.Generic.List<global::Microsoft.Example.Circuits.CommentsReferenceComponents>();
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.CommentsReferenceComponents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.CommentsReferenceComponents>(source, global::Microsoft.Example.Circuits.CommentsReferenceComponents.CommentDomainRoleId);
			foreach ( global::Microsoft.Example.Circuits.CommentsReferenceComponents link in links )
			{
				if ( target.Equals(link.Subject) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CommentsReferenceComponents link between a given Commentand a Component.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Example.Circuits.CommentsReferenceComponents GetLink( global::Microsoft.Example.Circuits.Comment source, global::Microsoft.Example.Circuits.Component target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.CommentsReferenceComponents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.CommentsReferenceComponents>(source, global::Microsoft.Example.Circuits.CommentsReferenceComponents.CommentDomainRoleId);
			foreach ( global::Microsoft.Example.Circuits.CommentsReferenceComponents link in links )
			{
				if ( target.Equals(link.Subject) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.Example.Circuits
{
	/// <summary>
	/// DomainRelationship ComponentHasComponentTerminal
	/// Description for Microsoft.Example.Circuits.ComponentHasComponentTerminal
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.ComponentHasComponentTerminal.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Example.Circuits.ComponentHasComponentTerminal.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("50c76db9-2620-490b-a117-39714ce4bdb0")]
	public abstract partial class ComponentHasComponentTerminal : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ComponentHasComponentTerminal domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x50c76db9, 0x2620, 0x490b, 0xa1, 0x17, 0x39, 0x71, 0x4c, 0xe4, 0xbd, 0xb0);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">The Partition instance containing this ElementLink</param>
		/// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		/// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		protected ComponentHasComponentTerminal(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Component domain role code
		
		/// <summary>
		/// Component domain role Id.
		/// </summary>
		public static readonly global::System.Guid ComponentDomainRoleId = new global::System.Guid(0x37c127ae, 0x9623, 0x4a1a, 0x88, 0x68, 0x04, 0xda, 0x2e, 0xda, 0x9b, 0xb3);
		
		/// <summary>
		/// DomainRole Component
		/// Description for
		/// Microsoft.Example.Circuits.ComponentHasComponentTerminal.Component
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.ComponentHasComponentTerminal/Component.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Example.Circuits.ComponentHasComponentTerminal/Component.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ComponentTerminals", PropertyDisplayNameKey="Microsoft.Example.Circuits.ComponentHasComponentTerminal/Component.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("37c127ae-9623-4a1a-8868-04da2eda9bb3")]
		public abstract Component Component
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access Component of a ComponentTerminal
		/// <summary>
		/// Gets Component.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Component GetComponent(ComponentTerminal element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ComponentTerminalDomainRoleId) as Component;
		}
		
		/// <summary>
		/// Sets Component.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetComponent(ComponentTerminal element, Component newComponent)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ComponentTerminalDomainRoleId, newComponent);
		}
		#endregion
		#region ComponentTerminal domain role code
		
		/// <summary>
		/// ComponentTerminal domain role Id.
		/// </summary>
		public static readonly global::System.Guid ComponentTerminalDomainRoleId = new global::System.Guid(0x4eae5468, 0x5993, 0x41b9, 0x8d, 0x4f, 0x5f, 0x94, 0x7f, 0xe1, 0x61, 0x6e);
		
		/// <summary>
		/// DomainRole ComponentTerminal
		/// Description for
		/// Microsoft.Example.Circuits.ComponentHasComponentTerminal.ComponentTerminal
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.ComponentHasComponentTerminal/ComponentTerminal.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Example.Circuits.ComponentHasComponentTerminal/ComponentTerminal.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Component", PropertyDisplayNameKey="Microsoft.Example.Circuits.ComponentHasComponentTerminal/ComponentTerminal.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("4eae5468-5993-41b9-8d4f-5f947fe1616e")]
		public abstract ComponentTerminal ComponentTerminal
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access ComponentTerminals of a Component
		/// <summary>
		/// Gets a list of ComponentTerminals.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<ComponentTerminal> GetComponentTerminals(Component element)
		{
			return GetRoleCollection<DslModeling::ReadOnlyLinkedElementCollection<ComponentTerminal>, ComponentTerminal>(element, ComponentDomainRoleId);
		}
		#endregion
		#region Component link accessor
		/// <summary>
		/// Get the list of ComponentHasComponentTerminal links to a Component.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Example.Circuits.ComponentHasComponentTerminal> GetLinksToComponentTerminals ( global::Microsoft.Example.Circuits.Component componentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.ComponentHasComponentTerminal>(componentInstance, global::Microsoft.Example.Circuits.ComponentHasComponentTerminal.ComponentDomainRoleId);
		}
		#endregion
		#region ComponentTerminal link accessor
		/// <summary>
		/// Get the ComponentHasComponentTerminal link to a ComponentTerminal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Example.Circuits.ComponentHasComponentTerminal GetLinkToComponent (global::Microsoft.Example.Circuits.ComponentTerminal componentTerminalInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.ComponentHasComponentTerminal> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.ComponentHasComponentTerminal>(componentTerminalInstance, global::Microsoft.Example.Circuits.ComponentHasComponentTerminal.ComponentTerminalDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ComponentTerminal not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ComponentHasComponentTerminal instance accessors
		
		/// <summary>
		/// Get any ComponentHasComponentTerminal links between a given Component and a ComponentTerminal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Example.Circuits.ComponentHasComponentTerminal> GetLinks( global::Microsoft.Example.Circuits.Component source, global::Microsoft.Example.Circuits.ComponentTerminal target )
		{
			global::System.Collections.Generic.List<global::Microsoft.Example.Circuits.ComponentHasComponentTerminal> outLinks = new global::System.Collections.Generic.List<global::Microsoft.Example.Circuits.ComponentHasComponentTerminal>();
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.ComponentHasComponentTerminal> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.ComponentHasComponentTerminal>(source, global::Microsoft.Example.Circuits.ComponentHasComponentTerminal.ComponentDomainRoleId);
			foreach ( global::Microsoft.Example.Circuits.ComponentHasComponentTerminal link in links )
			{
				if ( target.Equals(link.ComponentTerminal) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ComponentHasComponentTerminal link between a given Componentand a ComponentTerminal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Example.Circuits.ComponentHasComponentTerminal GetLink( global::Microsoft.Example.Circuits.Component source, global::Microsoft.Example.Circuits.ComponentTerminal target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.ComponentHasComponentTerminal> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.ComponentHasComponentTerminal>(source, global::Microsoft.Example.Circuits.ComponentHasComponentTerminal.ComponentDomainRoleId);
			foreach ( global::Microsoft.Example.Circuits.ComponentHasComponentTerminal link in links )
			{
				if ( target.Equals(link.ComponentTerminal) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.Example.Circuits
{
	/// <summary>
	/// DomainRelationship Wire
	/// Description for Microsoft.Example.Circuits.Wire
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.Wire.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Example.Circuits.Wire.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e03e3c03-c1d5-42df-bf9d-ca45e1e90064")]
	public partial class Wire : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Wire domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe03e3c03, 0xc1d5, 0x42df, 0xbf, 0x9d, 0xca, 0x45, 0xe1, 0xe9, 0x00, 0x64);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Wire link in the same Partition as the given Connection
		/// </summary>
		/// <param name="source">Connection to use as the source of the relationship.</param>
		/// <param name="target">Connection to use as the target of the relationship.</param>
		public Wire(Connection source, Connection target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Wire.SourceConnectionDomainRoleId, source), new DslModeling::RoleAssignment(Wire.TargetConnectionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Wire(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Wire(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Wire(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Wire(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceConnection domain role code
		
		/// <summary>
		/// SourceConnection domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceConnectionDomainRoleId = new global::System.Guid(0x58a88c4e, 0xd564, 0x4e4f, 0xb0, 0x90, 0xed, 0xaf, 0xe0, 0x1a, 0x67, 0x37);
		
		/// <summary>
		/// DomainRole SourceConnection
		/// Description for Microsoft.Example.Circuits.Wire.SourceConnection
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.Wire/SourceConnection.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Example.Circuits.Wire/SourceConnection.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetConnections", PropertyDisplayNameKey="Microsoft.Example.Circuits.Wire/SourceConnection.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("58a88c4e-d564-4e4f-b090-edafe01a6737")]
		public virtual Connection SourceConnection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Connection)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceConnectionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceConnectionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceConnections of a Connection
		/// <summary>
		/// Gets a list of SourceConnections.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Connection> GetSourceConnections(Connection element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Connection>, Connection>(element, TargetConnectionDomainRoleId);
		}
		#endregion
		#region TargetConnection domain role code
		
		/// <summary>
		/// TargetConnection domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetConnectionDomainRoleId = new global::System.Guid(0xee0be4b2, 0x6771, 0x4e51, 0xb4, 0x8d, 0x38, 0x35, 0x79, 0x8a, 0xf9, 0x5f);
		
		/// <summary>
		/// DomainRole TargetConnection
		/// Description for Microsoft.Example.Circuits.Wire.TargetConnection
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.Wire/TargetConnection.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Example.Circuits.Wire/TargetConnection.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceConnections", PropertyDisplayNameKey="Microsoft.Example.Circuits.Wire/TargetConnection.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ee0be4b2-6771-4e51-b48d-3835798af95f")]
		public virtual Connection TargetConnection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Connection)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetConnectionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetConnectionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetConnections of a Connection
		/// <summary>
		/// Gets a list of TargetConnections.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Connection> GetTargetConnections(Connection element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Connection>, Connection>(element, SourceConnectionDomainRoleId);
		}
		#endregion
		#region IsDirected domain property code
		
		/// <summary>
		/// IsDirected domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsDirectedDomainPropertyId = new global::System.Guid(0xbf6d4c7e, 0xad62, 0x4dd6, 0x96, 0x4a, 0x8b, 0x23, 0xd9, 0xb2, 0xe2, 0x95);
		
		/// <summary>
		/// Storage for IsDirected
		/// </summary>
		private global::System.Boolean isDirectedPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsDirected domain property.
		/// Description for Microsoft.Example.Circuits.Wire.Is Directed
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.Wire/IsDirected.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Example.Circuits.Wire/IsDirected.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("bf6d4c7e-ad62-4dd6-964a-8b23d9b2e295")]
		public global::System.Boolean IsDirected
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isDirectedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsDirectedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Wire.IsDirected domain property.
		/// </summary>
		internal sealed partial class IsDirectedPropertyHandler : DslModeling::DomainPropertyValueHandler<Wire, global::System.Boolean>
		{
			private IsDirectedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Wire.IsDirected domain property value handler.
			/// </summary>
			public static readonly IsDirectedPropertyHandler Instance = new IsDirectedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Wire.IsDirected domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsDirectedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Wire element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isDirectedPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Wire element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isDirectedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SourceConnection link accessor
		/// <summary>
		/// Get the list of Wire links to a Connection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Example.Circuits.Wire> GetLinksToTargetConnections ( global::Microsoft.Example.Circuits.Connection sourceConnectionInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.Wire>(sourceConnectionInstance, global::Microsoft.Example.Circuits.Wire.SourceConnectionDomainRoleId);
		}
		#endregion
		#region TargetConnection link accessor
		/// <summary>
		/// Get the list of Wire links to a Connection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Example.Circuits.Wire> GetLinksToSourceConnections ( global::Microsoft.Example.Circuits.Connection targetConnectionInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.Wire>(targetConnectionInstance, global::Microsoft.Example.Circuits.Wire.TargetConnectionDomainRoleId);
		}
		#endregion
		#region Wire instance accessors
		
		/// <summary>
		/// Get any Wire links between a given Connection and a Connection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Example.Circuits.Wire> GetLinks( global::Microsoft.Example.Circuits.Connection source, global::Microsoft.Example.Circuits.Connection target )
		{
			global::System.Collections.Generic.List<global::Microsoft.Example.Circuits.Wire> outLinks = new global::System.Collections.Generic.List<global::Microsoft.Example.Circuits.Wire>();
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.Wire> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.Wire>(source, global::Microsoft.Example.Circuits.Wire.SourceConnectionDomainRoleId);
			foreach ( global::Microsoft.Example.Circuits.Wire link in links )
			{
				if ( target.Equals(link.TargetConnection) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one Wire link between a given Connectionand a Connection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Example.Circuits.Wire GetLink( global::Microsoft.Example.Circuits.Connection source, global::Microsoft.Example.Circuits.Connection target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.Wire> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.Wire>(source, global::Microsoft.Example.Circuits.Wire.SourceConnectionDomainRoleId);
			foreach ( global::Microsoft.Example.Circuits.Wire link in links )
			{
				if ( target.Equals(link.TargetConnection) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.Example.Circuits
{
	/// <summary>
	/// DomainRelationship ComponentModelHasJunctions
	/// Description for Microsoft.Example.Circuits.ComponentModelHasJunctions
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.ComponentModelHasJunctions.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Example.Circuits.ComponentModelHasJunctions.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("24d21be4-5481-4cdb-8029-b55a80dfdafa")]
	public partial class ComponentModelHasJunctions : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ComponentModelHasJunctions domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x24d21be4, 0x5481, 0x4cdb, 0x80, 0x29, 0xb5, 0x5a, 0x80, 0xdf, 0xda, 0xfa);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ComponentModelHasJunctions link in the same Partition as the given ComponentModel
		/// </summary>
		/// <param name="source">ComponentModel to use as the source of the relationship.</param>
		/// <param name="target">Junction to use as the target of the relationship.</param>
		public ComponentModelHasJunctions(ComponentModel source, Junction target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ComponentModelHasJunctions.ComponentModelDomainRoleId, source), new DslModeling::RoleAssignment(ComponentModelHasJunctions.JunctionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ComponentModelHasJunctions(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ComponentModelHasJunctions(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ComponentModelHasJunctions(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ComponentModelHasJunctions(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ComponentModel domain role code
		
		/// <summary>
		/// ComponentModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ComponentModelDomainRoleId = new global::System.Guid(0x5d4b06a9, 0xef83, 0x41b9, 0x8c, 0x23, 0x09, 0x83, 0x52, 0x93, 0x8f, 0xfb);
		
		/// <summary>
		/// DomainRole ComponentModel
		/// Description for
		/// Microsoft.Example.Circuits.ComponentModelHasJunctions.ComponentModel
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.ComponentModelHasJunctions/ComponentModel.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Example.Circuits.ComponentModelHasJunctions/ComponentModel.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Junctions", PropertyDisplayNameKey="Microsoft.Example.Circuits.ComponentModelHasJunctions/ComponentModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("5d4b06a9-ef83-41b9-8c23-098352938ffb")]
		public virtual ComponentModel ComponentModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ComponentModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ComponentModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ComponentModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ComponentModel of a Junction
		/// <summary>
		/// Gets ComponentModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ComponentModel GetComponentModel(Junction element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, JunctionDomainRoleId) as ComponentModel;
		}
		
		/// <summary>
		/// Sets ComponentModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetComponentModel(Junction element, ComponentModel newComponentModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, JunctionDomainRoleId, newComponentModel);
		}
		#endregion
		#region Junction domain role code
		
		/// <summary>
		/// Junction domain role Id.
		/// </summary>
		public static readonly global::System.Guid JunctionDomainRoleId = new global::System.Guid(0x63f0ae4a, 0xc5d3, 0x4c05, 0xb7, 0xf0, 0xe7, 0x92, 0x56, 0x38, 0xdd, 0x26);
		
		/// <summary>
		/// DomainRole Junction
		/// Description for Microsoft.Example.Circuits.ComponentModelHasJunctions.Junction
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.ComponentModelHasJunctions/Junction.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Example.Circuits.ComponentModelHasJunctions/Junction.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ComponentModel", PropertyDisplayNameKey="Microsoft.Example.Circuits.ComponentModelHasJunctions/Junction.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("63f0ae4a-c5d3-4c05-b7f0-e7925638dd26")]
		public virtual Junction Junction
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Junction)DslModeling::DomainRoleInfo.GetRolePlayer(this, JunctionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, JunctionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Junctions of a ComponentModel
		/// <summary>
		/// Gets a list of Junctions.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Junction> GetJunctions(ComponentModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Junction>, Junction>(element, ComponentModelDomainRoleId);
		}
		#endregion
		#region ComponentModel link accessor
		/// <summary>
		/// Get the list of ComponentModelHasJunctions links to a ComponentModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Example.Circuits.ComponentModelHasJunctions> GetLinksToJunctions ( global::Microsoft.Example.Circuits.ComponentModel componentModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.ComponentModelHasJunctions>(componentModelInstance, global::Microsoft.Example.Circuits.ComponentModelHasJunctions.ComponentModelDomainRoleId);
		}
		#endregion
		#region Junction link accessor
		/// <summary>
		/// Get the ComponentModelHasJunctions link to a Junction.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Example.Circuits.ComponentModelHasJunctions GetLinkToComponentModel (global::Microsoft.Example.Circuits.Junction junctionInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.ComponentModelHasJunctions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.ComponentModelHasJunctions>(junctionInstance, global::Microsoft.Example.Circuits.ComponentModelHasJunctions.JunctionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Junction not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ComponentModelHasJunctions instance accessors
		
		/// <summary>
		/// Get any ComponentModelHasJunctions links between a given ComponentModel and a Junction.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Example.Circuits.ComponentModelHasJunctions> GetLinks( global::Microsoft.Example.Circuits.ComponentModel source, global::Microsoft.Example.Circuits.Junction target )
		{
			global::System.Collections.Generic.List<global::Microsoft.Example.Circuits.ComponentModelHasJunctions> outLinks = new global::System.Collections.Generic.List<global::Microsoft.Example.Circuits.ComponentModelHasJunctions>();
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.ComponentModelHasJunctions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.ComponentModelHasJunctions>(source, global::Microsoft.Example.Circuits.ComponentModelHasJunctions.ComponentModelDomainRoleId);
			foreach ( global::Microsoft.Example.Circuits.ComponentModelHasJunctions link in links )
			{
				if ( target.Equals(link.Junction) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ComponentModelHasJunctions link between a given ComponentModeland a Junction.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Example.Circuits.ComponentModelHasJunctions GetLink( global::Microsoft.Example.Circuits.ComponentModel source, global::Microsoft.Example.Circuits.Junction target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.ComponentModelHasJunctions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.ComponentModelHasJunctions>(source, global::Microsoft.Example.Circuits.ComponentModelHasJunctions.ComponentModelDomainRoleId);
			foreach ( global::Microsoft.Example.Circuits.ComponentModelHasJunctions link in links )
			{
				if ( target.Equals(link.Junction) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.Example.Circuits
{
	/// <summary>
	/// DomainRelationship ResistorHasT1
	/// Description for Microsoft.Example.Circuits.ResistorHasT1
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.ResistorHasT1.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Example.Circuits.ResistorHasT1.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("71a0c856-110b-43df-bd35-7f5b71a81c3f")]
	public partial class ResistorHasT1 : ComponentHasComponentTerminal
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ResistorHasT1 domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x71a0c856, 0x110b, 0x43df, 0xbd, 0x35, 0x7f, 0x5b, 0x71, 0xa8, 0x1c, 0x3f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ResistorHasT1 link in the same Partition as the given Resistor
		/// </summary>
		/// <param name="source">Resistor to use as the source of the relationship.</param>
		/// <param name="target">ComponentTerminal to use as the target of the relationship.</param>
		public ResistorHasT1(Resistor source, ComponentTerminal target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ResistorHasT1.ResistorDomainRoleId, source), new DslModeling::RoleAssignment(ResistorHasT1.T1DomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ResistorHasT1(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ResistorHasT1(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ResistorHasT1(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ResistorHasT1(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Resistor domain role code
		
		/// <summary>
		/// Resistor domain role Id.
		/// </summary>
		public static readonly global::System.Guid ResistorDomainRoleId = new global::System.Guid(0x9ae002ec, 0x2e1f, 0x452a, 0xb8, 0x8f, 0x52, 0xd7, 0x76, 0x3f, 0x6a, 0xfe);
		
		/// <summary>
		/// DomainRole Resistor
		/// PropagateCopy is set to copy terminals.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.ResistorHasT1/Resistor.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Example.Circuits.ResistorHasT1/Resistor.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "T1", PropertyDisplayNameKey="Microsoft.Example.Circuits.ResistorHasT1/Resistor.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("9ae002ec-2e1f-452a-b88f-52d7763f6afe")]
		public virtual Resistor Resistor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Resistor)DslModeling::DomainRoleInfo.GetRolePlayer(this, ResistorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ResistorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access R1 of a ComponentTerminal
		/// <summary>
		/// Gets R1.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Resistor GetR1(ComponentTerminal element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, T1DomainRoleId) as Resistor;
		}
		
		/// <summary>
		/// Sets R1.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetR1(ComponentTerminal element, Resistor newResistor)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, T1DomainRoleId, newResistor);
		}
		#endregion
		#region Component domain role override
		
		/// <summary>
		/// Gets the element playing Resistor domain role.
		/// Description for
		/// Microsoft.Example.Circuits.ComponentHasComponentTerminal.Component
		/// </summary>
		public override Component Component
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.Resistor;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.Resistor = (Resistor)value;
			}
		}
		
		#endregion
		#region T1 domain role code
		
		/// <summary>
		/// T1 domain role Id.
		/// </summary>
		public static readonly global::System.Guid T1DomainRoleId = new global::System.Guid(0xa1a22cf9, 0xec03, 0x4b12, 0xa1, 0x47, 0x3d, 0x8a, 0x74, 0xe3, 0x67, 0x78);
		
		/// <summary>
		/// DomainRole T1
		/// Description for Microsoft.Example.Circuits.ResistorHasT1.T1
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.ResistorHasT1/T1.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Example.Circuits.ResistorHasT1/T1.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "R1", PropertyDisplayNameKey="Microsoft.Example.Circuits.ResistorHasT1/T1.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("a1a22cf9-ec03-4b12-a147-3d8a74e36778")]
		public virtual ComponentTerminal T1
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ComponentTerminal)DslModeling::DomainRoleInfo.GetRolePlayer(this, T1DomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, T1DomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access T1 of a Resistor
		/// <summary>
		/// Gets T1.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ComponentTerminal GetT1(Resistor element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ResistorDomainRoleId) as ComponentTerminal;
		}
		
		/// <summary>
		/// Sets T1.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetT1(Resistor element, ComponentTerminal newT1)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ResistorDomainRoleId, newT1);
		}
		#endregion
		#region ComponentTerminal domain role override
		
		/// <summary>
		/// Gets the element playing T1 domain role.
		/// Description for
		/// Microsoft.Example.Circuits.ComponentHasComponentTerminal.ComponentTerminal
		/// </summary>
		public override ComponentTerminal ComponentTerminal
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.T1;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.T1 = value;
			}
		}
		
		#endregion
		#region Resistor link accessor
		/// <summary>
		/// Get the ResistorHasT1 link to a Resistor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Example.Circuits.ResistorHasT1 GetLinkToT1 (global::Microsoft.Example.Circuits.Resistor resistorInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.ResistorHasT1> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.ResistorHasT1>(resistorInstance, global::Microsoft.Example.Circuits.ResistorHasT1.ResistorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Resistor not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region T1 link accessor
		/// <summary>
		/// Get the ResistorHasT1 link to a ComponentTerminal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Example.Circuits.ResistorHasT1 GetLinkToR1 (global::Microsoft.Example.Circuits.ComponentTerminal t1Instance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.ResistorHasT1> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.ResistorHasT1>(t1Instance, global::Microsoft.Example.Circuits.ResistorHasT1.T1DomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of T1 not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ResistorHasT1 instance accessors
		
		/// <summary>
		/// Get any ResistorHasT1 links between a given Resistor and a ComponentTerminal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Example.Circuits.ResistorHasT1> GetLinks( global::Microsoft.Example.Circuits.Resistor source, global::Microsoft.Example.Circuits.ComponentTerminal target )
		{
			global::System.Collections.Generic.List<global::Microsoft.Example.Circuits.ResistorHasT1> outLinks = new global::System.Collections.Generic.List<global::Microsoft.Example.Circuits.ResistorHasT1>();
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.ResistorHasT1> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.ResistorHasT1>(source, global::Microsoft.Example.Circuits.ResistorHasT1.ResistorDomainRoleId);
			foreach ( global::Microsoft.Example.Circuits.ResistorHasT1 link in links )
			{
				if ( target.Equals(link.T1) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ResistorHasT1 link between a given Resistorand a ComponentTerminal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Example.Circuits.ResistorHasT1 GetLink( global::Microsoft.Example.Circuits.Resistor source, global::Microsoft.Example.Circuits.ComponentTerminal target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.ResistorHasT1> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.ResistorHasT1>(source, global::Microsoft.Example.Circuits.ResistorHasT1.ResistorDomainRoleId);
			foreach ( global::Microsoft.Example.Circuits.ResistorHasT1 link in links )
			{
				if ( target.Equals(link.T1) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.Example.Circuits
{
	/// <summary>
	/// DomainRelationship ResistorHasT2
	/// Description for Microsoft.Example.Circuits.ResistorHasT2
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.ResistorHasT2.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Example.Circuits.ResistorHasT2.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("84d0af5c-8fc5-4246-b18a-319834255e5a")]
	public partial class ResistorHasT2 : ComponentHasComponentTerminal
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ResistorHasT2 domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x84d0af5c, 0x8fc5, 0x4246, 0xb1, 0x8a, 0x31, 0x98, 0x34, 0x25, 0x5e, 0x5a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ResistorHasT2 link in the same Partition as the given Resistor
		/// </summary>
		/// <param name="source">Resistor to use as the source of the relationship.</param>
		/// <param name="target">ComponentTerminal to use as the target of the relationship.</param>
		public ResistorHasT2(Resistor source, ComponentTerminal target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ResistorHasT2.R2DomainRoleId, source), new DslModeling::RoleAssignment(ResistorHasT2.T2DomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ResistorHasT2(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ResistorHasT2(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ResistorHasT2(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ResistorHasT2(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region R2 domain role code
		
		/// <summary>
		/// R2 domain role Id.
		/// </summary>
		public static readonly global::System.Guid R2DomainRoleId = new global::System.Guid(0x58e5ef97, 0x90d7, 0x4dbf, 0xb7, 0x56, 0x5f, 0xab, 0xc6, 0x3e, 0xee, 0xed);
		
		/// <summary>
		/// DomainRole R2
		/// PropagateCopy is set to copy terminals.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.ResistorHasT2/R2.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Example.Circuits.ResistorHasT2/R2.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "T2", PropertyDisplayNameKey="Microsoft.Example.Circuits.ResistorHasT2/R2.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("58e5ef97-90d7-4dbf-b756-5fabc63eeeed")]
		public virtual Resistor R2
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Resistor)DslModeling::DomainRoleInfo.GetRolePlayer(this, R2DomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, R2DomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access R2 of a ComponentTerminal
		/// <summary>
		/// Gets R2.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Resistor GetR2(ComponentTerminal element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, T2DomainRoleId) as Resistor;
		}
		
		/// <summary>
		/// Sets R2.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetR2(ComponentTerminal element, Resistor newR2)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, T2DomainRoleId, newR2);
		}
		#endregion
		#region Component domain role override
		
		/// <summary>
		/// Gets the element playing R2 domain role.
		/// Description for
		/// Microsoft.Example.Circuits.ComponentHasComponentTerminal.Component
		/// </summary>
		public override Component Component
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.R2;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.R2 = (Resistor)value;
			}
		}
		
		#endregion
		#region T2 domain role code
		
		/// <summary>
		/// T2 domain role Id.
		/// </summary>
		public static readonly global::System.Guid T2DomainRoleId = new global::System.Guid(0x081b1778, 0x251d, 0x4e28, 0x91, 0x88, 0x85, 0x01, 0x58, 0x3f, 0x07, 0x1f);
		
		/// <summary>
		/// DomainRole T2
		/// Description for Microsoft.Example.Circuits.ResistorHasT2.T2
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.ResistorHasT2/T2.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Example.Circuits.ResistorHasT2/T2.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "R2", PropertyDisplayNameKey="Microsoft.Example.Circuits.ResistorHasT2/T2.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("081b1778-251d-4e28-9188-8501583f071f")]
		public virtual ComponentTerminal T2
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ComponentTerminal)DslModeling::DomainRoleInfo.GetRolePlayer(this, T2DomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, T2DomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access T2 of a Resistor
		/// <summary>
		/// Gets T2.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ComponentTerminal GetT2(Resistor element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, R2DomainRoleId) as ComponentTerminal;
		}
		
		/// <summary>
		/// Sets T2.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetT2(Resistor element, ComponentTerminal newT2)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, R2DomainRoleId, newT2);
		}
		#endregion
		#region ComponentTerminal domain role override
		
		/// <summary>
		/// Gets the element playing T2 domain role.
		/// Description for
		/// Microsoft.Example.Circuits.ComponentHasComponentTerminal.ComponentTerminal
		/// </summary>
		public override ComponentTerminal ComponentTerminal
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.T2;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.T2 = value;
			}
		}
		
		#endregion
		#region R2 link accessor
		/// <summary>
		/// Get the ResistorHasT2 link to a Resistor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Example.Circuits.ResistorHasT2 GetLinkToT2 (global::Microsoft.Example.Circuits.Resistor r2Instance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.ResistorHasT2> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.ResistorHasT2>(r2Instance, global::Microsoft.Example.Circuits.ResistorHasT2.R2DomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of R2 not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region T2 link accessor
		/// <summary>
		/// Get the ResistorHasT2 link to a ComponentTerminal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Example.Circuits.ResistorHasT2 GetLinkToR2 (global::Microsoft.Example.Circuits.ComponentTerminal t2Instance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.ResistorHasT2> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.ResistorHasT2>(t2Instance, global::Microsoft.Example.Circuits.ResistorHasT2.T2DomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of T2 not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ResistorHasT2 instance accessors
		
		/// <summary>
		/// Get any ResistorHasT2 links between a given Resistor and a ComponentTerminal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Example.Circuits.ResistorHasT2> GetLinks( global::Microsoft.Example.Circuits.Resistor source, global::Microsoft.Example.Circuits.ComponentTerminal target )
		{
			global::System.Collections.Generic.List<global::Microsoft.Example.Circuits.ResistorHasT2> outLinks = new global::System.Collections.Generic.List<global::Microsoft.Example.Circuits.ResistorHasT2>();
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.ResistorHasT2> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.ResistorHasT2>(source, global::Microsoft.Example.Circuits.ResistorHasT2.R2DomainRoleId);
			foreach ( global::Microsoft.Example.Circuits.ResistorHasT2 link in links )
			{
				if ( target.Equals(link.T2) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ResistorHasT2 link between a given Resistorand a ComponentTerminal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Example.Circuits.ResistorHasT2 GetLink( global::Microsoft.Example.Circuits.Resistor source, global::Microsoft.Example.Circuits.ComponentTerminal target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.ResistorHasT2> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.ResistorHasT2>(source, global::Microsoft.Example.Circuits.ResistorHasT2.R2DomainRoleId);
			foreach ( global::Microsoft.Example.Circuits.ResistorHasT2 link in links )
			{
				if ( target.Equals(link.T2) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.Example.Circuits
{
	/// <summary>
	/// DomainRelationship TransistorHasBase
	/// Description for Microsoft.Example.Circuits.TransistorHasBase
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.TransistorHasBase.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Example.Circuits.TransistorHasBase.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("6002ac5d-1228-4317-830a-2cdccb0df443")]
	public partial class TransistorHasBase : ComponentHasComponentTerminal
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TransistorHasBase domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6002ac5d, 0x1228, 0x4317, 0x83, 0x0a, 0x2c, 0xdc, 0xcb, 0x0d, 0xf4, 0x43);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TransistorHasBase link in the same Partition as the given Transistor
		/// </summary>
		/// <param name="source">Transistor to use as the source of the relationship.</param>
		/// <param name="target">ComponentTerminal to use as the target of the relationship.</param>
		public TransistorHasBase(Transistor source, ComponentTerminal target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TransistorHasBase.BaseOfTransistorDomainRoleId, source), new DslModeling::RoleAssignment(TransistorHasBase.BaseDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransistorHasBase(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransistorHasBase(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransistorHasBase(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransistorHasBase(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region BaseOfTransistor domain role code
		
		/// <summary>
		/// BaseOfTransistor domain role Id.
		/// </summary>
		public static readonly global::System.Guid BaseOfTransistorDomainRoleId = new global::System.Guid(0x489734a7, 0xa4a0, 0x431e, 0x99, 0x6b, 0xf0, 0x6e, 0x29, 0xde, 0xc5, 0x1e);
		
		/// <summary>
		/// DomainRole BaseOfTransistor
		/// PropagateCopy is set to copy terminals.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.TransistorHasBase/BaseOfTransistor.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Example.Circuits.TransistorHasBase/BaseOfTransistor.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Base", PropertyDisplayNameKey="Microsoft.Example.Circuits.TransistorHasBase/BaseOfTransistor.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("489734a7-a4a0-431e-996b-f06e29dec51e")]
		public virtual Transistor BaseOfTransistor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Transistor)DslModeling::DomainRoleInfo.GetRolePlayer(this, BaseOfTransistorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BaseOfTransistorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BaseOfTransistor of a ComponentTerminal
		/// <summary>
		/// Gets BaseOfTransistor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Transistor GetBaseOfTransistor(ComponentTerminal element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, BaseDomainRoleId) as Transistor;
		}
		
		/// <summary>
		/// Sets BaseOfTransistor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetBaseOfTransistor(ComponentTerminal element, Transistor newBaseOfTransistor)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, BaseDomainRoleId, newBaseOfTransistor);
		}
		#endregion
		#region Component domain role override
		
		/// <summary>
		/// Gets the element playing BaseOfTransistor domain role.
		/// Description for
		/// Microsoft.Example.Circuits.ComponentHasComponentTerminal.Component
		/// </summary>
		public override Component Component
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.BaseOfTransistor;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.BaseOfTransistor = (Transistor)value;
			}
		}
		
		#endregion
		#region Base domain role code
		
		/// <summary>
		/// Base domain role Id.
		/// </summary>
		public static readonly global::System.Guid BaseDomainRoleId = new global::System.Guid(0xac708137, 0x4fc1, 0x4825, 0xbb, 0xc7, 0x0f, 0x2b, 0x66, 0xc1, 0x75, 0xe3);
		
		/// <summary>
		/// DomainRole Base
		/// Description for Microsoft.Example.Circuits.TransistorHasBase.Base
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.TransistorHasBase/Base.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Example.Circuits.TransistorHasBase/Base.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "BaseOfTransistor", PropertyDisplayNameKey="Microsoft.Example.Circuits.TransistorHasBase/Base.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("ac708137-4fc1-4825-bbc7-0f2b66c175e3")]
		public virtual ComponentTerminal Base
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ComponentTerminal)DslModeling::DomainRoleInfo.GetRolePlayer(this, BaseDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BaseDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Base of a Transistor
		/// <summary>
		/// Gets Base.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ComponentTerminal GetBase(Transistor element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, BaseOfTransistorDomainRoleId) as ComponentTerminal;
		}
		
		/// <summary>
		/// Sets Base.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetBase(Transistor element, ComponentTerminal newBase)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, BaseOfTransistorDomainRoleId, newBase);
		}
		#endregion
		#region ComponentTerminal domain role override
		
		/// <summary>
		/// Gets the element playing Base domain role.
		/// Description for
		/// Microsoft.Example.Circuits.ComponentHasComponentTerminal.ComponentTerminal
		/// </summary>
		public override ComponentTerminal ComponentTerminal
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.Base;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.Base = value;
			}
		}
		
		#endregion
		#region BaseOfTransistor link accessor
		/// <summary>
		/// Get the TransistorHasBase link to a Transistor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Example.Circuits.TransistorHasBase GetLinkToBase (global::Microsoft.Example.Circuits.Transistor baseOfTransistorInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.TransistorHasBase> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.TransistorHasBase>(baseOfTransistorInstance, global::Microsoft.Example.Circuits.TransistorHasBase.BaseOfTransistorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of BaseOfTransistor not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Base link accessor
		/// <summary>
		/// Get the TransistorHasBase link to a ComponentTerminal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Example.Circuits.TransistorHasBase GetLinkToBaseOfTransistor (global::Microsoft.Example.Circuits.ComponentTerminal baseInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.TransistorHasBase> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.TransistorHasBase>(baseInstance, global::Microsoft.Example.Circuits.TransistorHasBase.BaseDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Base not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TransistorHasBase instance accessors
		
		/// <summary>
		/// Get any TransistorHasBase links between a given Transistor and a ComponentTerminal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Example.Circuits.TransistorHasBase> GetLinks( global::Microsoft.Example.Circuits.Transistor source, global::Microsoft.Example.Circuits.ComponentTerminal target )
		{
			global::System.Collections.Generic.List<global::Microsoft.Example.Circuits.TransistorHasBase> outLinks = new global::System.Collections.Generic.List<global::Microsoft.Example.Circuits.TransistorHasBase>();
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.TransistorHasBase> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.TransistorHasBase>(source, global::Microsoft.Example.Circuits.TransistorHasBase.BaseOfTransistorDomainRoleId);
			foreach ( global::Microsoft.Example.Circuits.TransistorHasBase link in links )
			{
				if ( target.Equals(link.Base) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TransistorHasBase link between a given Transistorand a ComponentTerminal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Example.Circuits.TransistorHasBase GetLink( global::Microsoft.Example.Circuits.Transistor source, global::Microsoft.Example.Circuits.ComponentTerminal target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.TransistorHasBase> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.TransistorHasBase>(source, global::Microsoft.Example.Circuits.TransistorHasBase.BaseOfTransistorDomainRoleId);
			foreach ( global::Microsoft.Example.Circuits.TransistorHasBase link in links )
			{
				if ( target.Equals(link.Base) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.Example.Circuits
{
	/// <summary>
	/// DomainRelationship TransistorHasCollector
	/// Description for Microsoft.Example.Circuits.TransistorHasCollector
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.TransistorHasCollector.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Example.Circuits.TransistorHasCollector.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("c58641fa-29ee-49af-8c6b-9fe56485fcf9")]
	public partial class TransistorHasCollector : ComponentHasComponentTerminal
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TransistorHasCollector domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc58641fa, 0x29ee, 0x49af, 0x8c, 0x6b, 0x9f, 0xe5, 0x64, 0x85, 0xfc, 0xf9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TransistorHasCollector link in the same Partition as the given Transistor
		/// </summary>
		/// <param name="source">Transistor to use as the source of the relationship.</param>
		/// <param name="target">ComponentTerminal to use as the target of the relationship.</param>
		public TransistorHasCollector(Transistor source, ComponentTerminal target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TransistorHasCollector.CollectorOfTransistorDomainRoleId, source), new DslModeling::RoleAssignment(TransistorHasCollector.CollectorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransistorHasCollector(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransistorHasCollector(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransistorHasCollector(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransistorHasCollector(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CollectorOfTransistor domain role code
		
		/// <summary>
		/// CollectorOfTransistor domain role Id.
		/// </summary>
		public static readonly global::System.Guid CollectorOfTransistorDomainRoleId = new global::System.Guid(0x111c6979, 0x50af, 0x4e45, 0x95, 0x9f, 0x1a, 0xfb, 0xfa, 0x73, 0x87, 0x39);
		
		/// <summary>
		/// DomainRole CollectorOfTransistor
		/// PropagateCopy is set to copy terminals.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.TransistorHasCollector/CollectorOfTransistor.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Example.Circuits.TransistorHasCollector/CollectorOfTransistor.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Collector", PropertyDisplayNameKey="Microsoft.Example.Circuits.TransistorHasCollector/CollectorOfTransistor.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("111c6979-50af-4e45-959f-1afbfa738739")]
		public virtual Transistor CollectorOfTransistor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Transistor)DslModeling::DomainRoleInfo.GetRolePlayer(this, CollectorOfTransistorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CollectorOfTransistorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CollectorOfTransistor of a ComponentTerminal
		/// <summary>
		/// Gets CollectorOfTransistor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Transistor GetCollectorOfTransistor(ComponentTerminal element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CollectorDomainRoleId) as Transistor;
		}
		
		/// <summary>
		/// Sets CollectorOfTransistor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCollectorOfTransistor(ComponentTerminal element, Transistor newCollectorOfTransistor)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CollectorDomainRoleId, newCollectorOfTransistor);
		}
		#endregion
		#region Component domain role override
		
		/// <summary>
		/// Gets the element playing CollectorOfTransistor domain role.
		/// Description for
		/// Microsoft.Example.Circuits.ComponentHasComponentTerminal.Component
		/// </summary>
		public override Component Component
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.CollectorOfTransistor;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.CollectorOfTransistor = (Transistor)value;
			}
		}
		
		#endregion
		#region Collector domain role code
		
		/// <summary>
		/// Collector domain role Id.
		/// </summary>
		public static readonly global::System.Guid CollectorDomainRoleId = new global::System.Guid(0x2c52f29b, 0x11af, 0x4bdb, 0x8a, 0x47, 0x15, 0xa5, 0x25, 0x02, 0x92, 0x3b);
		
		/// <summary>
		/// DomainRole Collector
		/// Description for Microsoft.Example.Circuits.TransistorHasCollector.Collector
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.TransistorHasCollector/Collector.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Example.Circuits.TransistorHasCollector/Collector.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "CollectorOfTransistor", PropertyDisplayNameKey="Microsoft.Example.Circuits.TransistorHasCollector/Collector.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("2c52f29b-11af-4bdb-8a47-15a52502923b")]
		public virtual ComponentTerminal Collector
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ComponentTerminal)DslModeling::DomainRoleInfo.GetRolePlayer(this, CollectorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CollectorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Collector of a Transistor
		/// <summary>
		/// Gets Collector.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ComponentTerminal GetCollector(Transistor element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CollectorOfTransistorDomainRoleId) as ComponentTerminal;
		}
		
		/// <summary>
		/// Sets Collector.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCollector(Transistor element, ComponentTerminal newCollector)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CollectorOfTransistorDomainRoleId, newCollector);
		}
		#endregion
		#region ComponentTerminal domain role override
		
		/// <summary>
		/// Gets the element playing Collector domain role.
		/// Description for
		/// Microsoft.Example.Circuits.ComponentHasComponentTerminal.ComponentTerminal
		/// </summary>
		public override ComponentTerminal ComponentTerminal
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.Collector;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.Collector = value;
			}
		}
		
		#endregion
		#region CollectorOfTransistor link accessor
		/// <summary>
		/// Get the TransistorHasCollector link to a Transistor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Example.Circuits.TransistorHasCollector GetLinkToCollector (global::Microsoft.Example.Circuits.Transistor collectorOfTransistorInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.TransistorHasCollector> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.TransistorHasCollector>(collectorOfTransistorInstance, global::Microsoft.Example.Circuits.TransistorHasCollector.CollectorOfTransistorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CollectorOfTransistor not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Collector link accessor
		/// <summary>
		/// Get the TransistorHasCollector link to a ComponentTerminal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Example.Circuits.TransistorHasCollector GetLinkToCollectorOfTransistor (global::Microsoft.Example.Circuits.ComponentTerminal collectorInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.TransistorHasCollector> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.TransistorHasCollector>(collectorInstance, global::Microsoft.Example.Circuits.TransistorHasCollector.CollectorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Collector not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TransistorHasCollector instance accessors
		
		/// <summary>
		/// Get any TransistorHasCollector links between a given Transistor and a ComponentTerminal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Example.Circuits.TransistorHasCollector> GetLinks( global::Microsoft.Example.Circuits.Transistor source, global::Microsoft.Example.Circuits.ComponentTerminal target )
		{
			global::System.Collections.Generic.List<global::Microsoft.Example.Circuits.TransistorHasCollector> outLinks = new global::System.Collections.Generic.List<global::Microsoft.Example.Circuits.TransistorHasCollector>();
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.TransistorHasCollector> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.TransistorHasCollector>(source, global::Microsoft.Example.Circuits.TransistorHasCollector.CollectorOfTransistorDomainRoleId);
			foreach ( global::Microsoft.Example.Circuits.TransistorHasCollector link in links )
			{
				if ( target.Equals(link.Collector) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TransistorHasCollector link between a given Transistorand a ComponentTerminal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Example.Circuits.TransistorHasCollector GetLink( global::Microsoft.Example.Circuits.Transistor source, global::Microsoft.Example.Circuits.ComponentTerminal target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.TransistorHasCollector> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.TransistorHasCollector>(source, global::Microsoft.Example.Circuits.TransistorHasCollector.CollectorOfTransistorDomainRoleId);
			foreach ( global::Microsoft.Example.Circuits.TransistorHasCollector link in links )
			{
				if ( target.Equals(link.Collector) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.Example.Circuits
{
	/// <summary>
	/// DomainRelationship TransistorHasEmitter
	/// Description for Microsoft.Example.Circuits.TransistorHasEmitter
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.TransistorHasEmitter.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Example.Circuits.TransistorHasEmitter.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("11ce6e42-b520-438b-a674-d6176b4d36ab")]
	public partial class TransistorHasEmitter : ComponentHasComponentTerminal
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TransistorHasEmitter domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x11ce6e42, 0xb520, 0x438b, 0xa6, 0x74, 0xd6, 0x17, 0x6b, 0x4d, 0x36, 0xab);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TransistorHasEmitter link in the same Partition as the given Transistor
		/// </summary>
		/// <param name="source">Transistor to use as the source of the relationship.</param>
		/// <param name="target">ComponentTerminal to use as the target of the relationship.</param>
		public TransistorHasEmitter(Transistor source, ComponentTerminal target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TransistorHasEmitter.EmitterOfTransistorDomainRoleId, source), new DslModeling::RoleAssignment(TransistorHasEmitter.EmitterDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransistorHasEmitter(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransistorHasEmitter(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransistorHasEmitter(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransistorHasEmitter(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region EmitterOfTransistor domain role code
		
		/// <summary>
		/// EmitterOfTransistor domain role Id.
		/// </summary>
		public static readonly global::System.Guid EmitterOfTransistorDomainRoleId = new global::System.Guid(0xa72a05c8, 0x561d, 0x434c, 0x9a, 0x48, 0x4f, 0x70, 0xdc, 0xba, 0x9d, 0x24);
		
		/// <summary>
		/// DomainRole EmitterOfTransistor
		/// PropagateCopy is set to copy terminals.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.TransistorHasEmitter/EmitterOfTransistor.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Example.Circuits.TransistorHasEmitter/EmitterOfTransistor.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Emitter", PropertyDisplayNameKey="Microsoft.Example.Circuits.TransistorHasEmitter/EmitterOfTransistor.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("a72a05c8-561d-434c-9a48-4f70dcba9d24")]
		public virtual Transistor EmitterOfTransistor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Transistor)DslModeling::DomainRoleInfo.GetRolePlayer(this, EmitterOfTransistorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EmitterOfTransistorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EmitterOfTransistor of a ComponentTerminal
		/// <summary>
		/// Gets EmitterOfTransistor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Transistor GetEmitterOfTransistor(ComponentTerminal element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EmitterDomainRoleId) as Transistor;
		}
		
		/// <summary>
		/// Sets EmitterOfTransistor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEmitterOfTransistor(ComponentTerminal element, Transistor newEmitterOfTransistor)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EmitterDomainRoleId, newEmitterOfTransistor);
		}
		#endregion
		#region Component domain role override
		
		/// <summary>
		/// Gets the element playing EmitterOfTransistor domain role.
		/// Description for
		/// Microsoft.Example.Circuits.ComponentHasComponentTerminal.Component
		/// </summary>
		public override Component Component
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.EmitterOfTransistor;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.EmitterOfTransistor = (Transistor)value;
			}
		}
		
		#endregion
		#region Emitter domain role code
		
		/// <summary>
		/// Emitter domain role Id.
		/// </summary>
		public static readonly global::System.Guid EmitterDomainRoleId = new global::System.Guid(0x9cb509df, 0x8bf3, 0x4a4c, 0x97, 0xd9, 0x47, 0x1b, 0x07, 0x01, 0xf3, 0xac);
		
		/// <summary>
		/// DomainRole Emitter
		/// Description for Microsoft.Example.Circuits.TransistorHasEmitter.Emitter
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.TransistorHasEmitter/Emitter.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Example.Circuits.TransistorHasEmitter/Emitter.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "EmitterOfTransistor", PropertyDisplayNameKey="Microsoft.Example.Circuits.TransistorHasEmitter/Emitter.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("9cb509df-8bf3-4a4c-97d9-471b0701f3ac")]
		public virtual ComponentTerminal Emitter
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ComponentTerminal)DslModeling::DomainRoleInfo.GetRolePlayer(this, EmitterDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EmitterDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Emitter of a Transistor
		/// <summary>
		/// Gets Emitter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ComponentTerminal GetEmitter(Transistor element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EmitterOfTransistorDomainRoleId) as ComponentTerminal;
		}
		
		/// <summary>
		/// Sets Emitter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEmitter(Transistor element, ComponentTerminal newEmitter)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EmitterOfTransistorDomainRoleId, newEmitter);
		}
		#endregion
		#region ComponentTerminal domain role override
		
		/// <summary>
		/// Gets the element playing Emitter domain role.
		/// Description for
		/// Microsoft.Example.Circuits.ComponentHasComponentTerminal.ComponentTerminal
		/// </summary>
		public override ComponentTerminal ComponentTerminal
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.Emitter;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.Emitter = value;
			}
		}
		
		#endregion
		#region EmitterOfTransistor link accessor
		/// <summary>
		/// Get the TransistorHasEmitter link to a Transistor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Example.Circuits.TransistorHasEmitter GetLinkToEmitter (global::Microsoft.Example.Circuits.Transistor emitterOfTransistorInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.TransistorHasEmitter> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.TransistorHasEmitter>(emitterOfTransistorInstance, global::Microsoft.Example.Circuits.TransistorHasEmitter.EmitterOfTransistorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of EmitterOfTransistor not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Emitter link accessor
		/// <summary>
		/// Get the TransistorHasEmitter link to a ComponentTerminal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Example.Circuits.TransistorHasEmitter GetLinkToEmitterOfTransistor (global::Microsoft.Example.Circuits.ComponentTerminal emitterInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.TransistorHasEmitter> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.TransistorHasEmitter>(emitterInstance, global::Microsoft.Example.Circuits.TransistorHasEmitter.EmitterDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Emitter not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TransistorHasEmitter instance accessors
		
		/// <summary>
		/// Get any TransistorHasEmitter links between a given Transistor and a ComponentTerminal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Example.Circuits.TransistorHasEmitter> GetLinks( global::Microsoft.Example.Circuits.Transistor source, global::Microsoft.Example.Circuits.ComponentTerminal target )
		{
			global::System.Collections.Generic.List<global::Microsoft.Example.Circuits.TransistorHasEmitter> outLinks = new global::System.Collections.Generic.List<global::Microsoft.Example.Circuits.TransistorHasEmitter>();
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.TransistorHasEmitter> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.TransistorHasEmitter>(source, global::Microsoft.Example.Circuits.TransistorHasEmitter.EmitterOfTransistorDomainRoleId);
			foreach ( global::Microsoft.Example.Circuits.TransistorHasEmitter link in links )
			{
				if ( target.Equals(link.Emitter) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TransistorHasEmitter link between a given Transistorand a ComponentTerminal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Example.Circuits.TransistorHasEmitter GetLink( global::Microsoft.Example.Circuits.Transistor source, global::Microsoft.Example.Circuits.ComponentTerminal target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.TransistorHasEmitter> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.TransistorHasEmitter>(source, global::Microsoft.Example.Circuits.TransistorHasEmitter.EmitterOfTransistorDomainRoleId);
			foreach ( global::Microsoft.Example.Circuits.TransistorHasEmitter link in links )
			{
				if ( target.Equals(link.Emitter) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.Example.Circuits
{
	/// <summary>
	/// DomainRelationship CapacitorHasT1
	/// Description for Microsoft.Example.Circuits.CapacitorHasT1
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.CapacitorHasT1.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Example.Circuits.CapacitorHasT1.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("b8fa5038-cf5c-407f-b405-d03f19179069")]
	public partial class CapacitorHasT1 : ComponentHasComponentTerminal
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CapacitorHasT1 domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb8fa5038, 0xcf5c, 0x407f, 0xb4, 0x05, 0xd0, 0x3f, 0x19, 0x17, 0x90, 0x69);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CapacitorHasT1 link in the same Partition as the given Capacitor
		/// </summary>
		/// <param name="source">Capacitor to use as the source of the relationship.</param>
		/// <param name="target">ComponentTerminal to use as the target of the relationship.</param>
		public CapacitorHasT1(Capacitor source, ComponentTerminal target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CapacitorHasT1.CapacitorT1DomainRoleId, source), new DslModeling::RoleAssignment(CapacitorHasT1.T1DomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CapacitorHasT1(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CapacitorHasT1(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CapacitorHasT1(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CapacitorHasT1(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CapacitorT1 domain role code
		
		/// <summary>
		/// CapacitorT1 domain role Id.
		/// </summary>
		public static readonly global::System.Guid CapacitorT1DomainRoleId = new global::System.Guid(0x203fd785, 0xe783, 0x462b, 0x96, 0xd0, 0x88, 0x70, 0xad, 0x30, 0x32, 0x28);
		
		/// <summary>
		/// DomainRole CapacitorT1
		/// PropagateCopy is set to copy terminals.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.CapacitorHasT1/CapacitorT1.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Example.Circuits.CapacitorHasT1/CapacitorT1.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "T1", PropertyDisplayNameKey="Microsoft.Example.Circuits.CapacitorHasT1/CapacitorT1.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("203fd785-e783-462b-96d0-8870ad303228")]
		public virtual Capacitor CapacitorT1
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Capacitor)DslModeling::DomainRoleInfo.GetRolePlayer(this, CapacitorT1DomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CapacitorT1DomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CapacitorT1 of a ComponentTerminal
		/// <summary>
		/// Gets CapacitorT1.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Capacitor GetCapacitorT1(ComponentTerminal element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, T1DomainRoleId) as Capacitor;
		}
		
		/// <summary>
		/// Sets CapacitorT1.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCapacitorT1(ComponentTerminal element, Capacitor newCapacitorT1)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, T1DomainRoleId, newCapacitorT1);
		}
		#endregion
		#region Component domain role override
		
		/// <summary>
		/// Gets the element playing CapacitorT1 domain role.
		/// Description for
		/// Microsoft.Example.Circuits.ComponentHasComponentTerminal.Component
		/// </summary>
		public override Component Component
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.CapacitorT1;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.CapacitorT1 = (Capacitor)value;
			}
		}
		
		#endregion
		#region T1 domain role code
		
		/// <summary>
		/// T1 domain role Id.
		/// </summary>
		public static readonly global::System.Guid T1DomainRoleId = new global::System.Guid(0x4a5f92e6, 0xc900, 0x4b73, 0xb6, 0x84, 0x31, 0x80, 0xb3, 0x03, 0x6e, 0x59);
		
		/// <summary>
		/// DomainRole T1
		/// Description for Microsoft.Example.Circuits.CapacitorHasT1.T1
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.CapacitorHasT1/T1.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Example.Circuits.CapacitorHasT1/T1.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "CapacitorT1", PropertyDisplayNameKey="Microsoft.Example.Circuits.CapacitorHasT1/T1.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("4a5f92e6-c900-4b73-b684-3180b3036e59")]
		public virtual ComponentTerminal T1
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ComponentTerminal)DslModeling::DomainRoleInfo.GetRolePlayer(this, T1DomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, T1DomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access T1 of a Capacitor
		/// <summary>
		/// Gets T1.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ComponentTerminal GetT1(Capacitor element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CapacitorT1DomainRoleId) as ComponentTerminal;
		}
		
		/// <summary>
		/// Sets T1.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetT1(Capacitor element, ComponentTerminal newT1)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CapacitorT1DomainRoleId, newT1);
		}
		#endregion
		#region ComponentTerminal domain role override
		
		/// <summary>
		/// Gets the element playing T1 domain role.
		/// Description for
		/// Microsoft.Example.Circuits.ComponentHasComponentTerminal.ComponentTerminal
		/// </summary>
		public override ComponentTerminal ComponentTerminal
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.T1;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.T1 = value;
			}
		}
		
		#endregion
		#region CapacitorT1 link accessor
		/// <summary>
		/// Get the CapacitorHasT1 link to a Capacitor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Example.Circuits.CapacitorHasT1 GetLinkToT1 (global::Microsoft.Example.Circuits.Capacitor capacitorT1Instance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.CapacitorHasT1> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.CapacitorHasT1>(capacitorT1Instance, global::Microsoft.Example.Circuits.CapacitorHasT1.CapacitorT1DomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CapacitorT1 not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region T1 link accessor
		/// <summary>
		/// Get the CapacitorHasT1 link to a ComponentTerminal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Example.Circuits.CapacitorHasT1 GetLinkToCapacitorT1 (global::Microsoft.Example.Circuits.ComponentTerminal t1Instance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.CapacitorHasT1> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.CapacitorHasT1>(t1Instance, global::Microsoft.Example.Circuits.CapacitorHasT1.T1DomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of T1 not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CapacitorHasT1 instance accessors
		
		/// <summary>
		/// Get any CapacitorHasT1 links between a given Capacitor and a ComponentTerminal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Example.Circuits.CapacitorHasT1> GetLinks( global::Microsoft.Example.Circuits.Capacitor source, global::Microsoft.Example.Circuits.ComponentTerminal target )
		{
			global::System.Collections.Generic.List<global::Microsoft.Example.Circuits.CapacitorHasT1> outLinks = new global::System.Collections.Generic.List<global::Microsoft.Example.Circuits.CapacitorHasT1>();
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.CapacitorHasT1> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.CapacitorHasT1>(source, global::Microsoft.Example.Circuits.CapacitorHasT1.CapacitorT1DomainRoleId);
			foreach ( global::Microsoft.Example.Circuits.CapacitorHasT1 link in links )
			{
				if ( target.Equals(link.T1) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CapacitorHasT1 link between a given Capacitorand a ComponentTerminal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Example.Circuits.CapacitorHasT1 GetLink( global::Microsoft.Example.Circuits.Capacitor source, global::Microsoft.Example.Circuits.ComponentTerminal target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.CapacitorHasT1> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.CapacitorHasT1>(source, global::Microsoft.Example.Circuits.CapacitorHasT1.CapacitorT1DomainRoleId);
			foreach ( global::Microsoft.Example.Circuits.CapacitorHasT1 link in links )
			{
				if ( target.Equals(link.T1) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.Example.Circuits
{
	/// <summary>
	/// DomainRelationship CapacitorHasT2
	/// Description for Microsoft.Example.Circuits.CapacitorHasT2
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.CapacitorHasT2.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Example.Circuits.CapacitorHasT2.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("9e98c146-34a1-4cf9-9bb4-2d551d6f3122")]
	public partial class CapacitorHasT2 : ComponentHasComponentTerminal
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CapacitorHasT2 domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9e98c146, 0x34a1, 0x4cf9, 0x9b, 0xb4, 0x2d, 0x55, 0x1d, 0x6f, 0x31, 0x22);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CapacitorHasT2 link in the same Partition as the given Capacitor
		/// </summary>
		/// <param name="source">Capacitor to use as the source of the relationship.</param>
		/// <param name="target">ComponentTerminal to use as the target of the relationship.</param>
		public CapacitorHasT2(Capacitor source, ComponentTerminal target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CapacitorHasT2.CapacitorT2DomainRoleId, source), new DslModeling::RoleAssignment(CapacitorHasT2.T2DomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CapacitorHasT2(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CapacitorHasT2(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CapacitorHasT2(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CapacitorHasT2(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CapacitorT2 domain role code
		
		/// <summary>
		/// CapacitorT2 domain role Id.
		/// </summary>
		public static readonly global::System.Guid CapacitorT2DomainRoleId = new global::System.Guid(0x44bc0d48, 0xfd5a, 0x4f48, 0x82, 0x73, 0xbe, 0x0a, 0x93, 0xa1, 0x9a, 0x2a);
		
		/// <summary>
		/// DomainRole CapacitorT2
		/// PropagateCopy is set to copy terminals.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.CapacitorHasT2/CapacitorT2.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Example.Circuits.CapacitorHasT2/CapacitorT2.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "T2", PropertyDisplayNameKey="Microsoft.Example.Circuits.CapacitorHasT2/CapacitorT2.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("44bc0d48-fd5a-4f48-8273-be0a93a19a2a")]
		public virtual Capacitor CapacitorT2
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Capacitor)DslModeling::DomainRoleInfo.GetRolePlayer(this, CapacitorT2DomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CapacitorT2DomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CapacitorT2 of a ComponentTerminal
		/// <summary>
		/// Gets CapacitorT2.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Capacitor GetCapacitorT2(ComponentTerminal element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, T2DomainRoleId) as Capacitor;
		}
		
		/// <summary>
		/// Sets CapacitorT2.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCapacitorT2(ComponentTerminal element, Capacitor newCapacitorT2)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, T2DomainRoleId, newCapacitorT2);
		}
		#endregion
		#region Component domain role override
		
		/// <summary>
		/// Gets the element playing CapacitorT2 domain role.
		/// Description for
		/// Microsoft.Example.Circuits.ComponentHasComponentTerminal.Component
		/// </summary>
		public override Component Component
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.CapacitorT2;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.CapacitorT2 = (Capacitor)value;
			}
		}
		
		#endregion
		#region T2 domain role code
		
		/// <summary>
		/// T2 domain role Id.
		/// </summary>
		public static readonly global::System.Guid T2DomainRoleId = new global::System.Guid(0x18bf8808, 0xaafb, 0x4ea8, 0xa6, 0xb6, 0x55, 0xf9, 0x4b, 0x26, 0x18, 0x80);
		
		/// <summary>
		/// DomainRole T2
		/// Description for Microsoft.Example.Circuits.CapacitorHasT2.T2
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.CapacitorHasT2/T2.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Example.Circuits.CapacitorHasT2/T2.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "CapacitorT2", PropertyDisplayNameKey="Microsoft.Example.Circuits.CapacitorHasT2/T2.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("18bf8808-aafb-4ea8-a6b6-55f94b261880")]
		public virtual ComponentTerminal T2
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ComponentTerminal)DslModeling::DomainRoleInfo.GetRolePlayer(this, T2DomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, T2DomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access T2 of a Capacitor
		/// <summary>
		/// Gets T2.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ComponentTerminal GetT2(Capacitor element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CapacitorT2DomainRoleId) as ComponentTerminal;
		}
		
		/// <summary>
		/// Sets T2.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetT2(Capacitor element, ComponentTerminal newT2)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CapacitorT2DomainRoleId, newT2);
		}
		#endregion
		#region ComponentTerminal domain role override
		
		/// <summary>
		/// Gets the element playing T2 domain role.
		/// Description for
		/// Microsoft.Example.Circuits.ComponentHasComponentTerminal.ComponentTerminal
		/// </summary>
		public override ComponentTerminal ComponentTerminal
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.T2;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.T2 = value;
			}
		}
		
		#endregion
		#region CapacitorT2 link accessor
		/// <summary>
		/// Get the CapacitorHasT2 link to a Capacitor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Example.Circuits.CapacitorHasT2 GetLinkToT2 (global::Microsoft.Example.Circuits.Capacitor capacitorT2Instance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.CapacitorHasT2> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.CapacitorHasT2>(capacitorT2Instance, global::Microsoft.Example.Circuits.CapacitorHasT2.CapacitorT2DomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CapacitorT2 not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region T2 link accessor
		/// <summary>
		/// Get the CapacitorHasT2 link to a ComponentTerminal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Example.Circuits.CapacitorHasT2 GetLinkToCapacitorT2 (global::Microsoft.Example.Circuits.ComponentTerminal t2Instance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.CapacitorHasT2> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.CapacitorHasT2>(t2Instance, global::Microsoft.Example.Circuits.CapacitorHasT2.T2DomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of T2 not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CapacitorHasT2 instance accessors
		
		/// <summary>
		/// Get any CapacitorHasT2 links between a given Capacitor and a ComponentTerminal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Example.Circuits.CapacitorHasT2> GetLinks( global::Microsoft.Example.Circuits.Capacitor source, global::Microsoft.Example.Circuits.ComponentTerminal target )
		{
			global::System.Collections.Generic.List<global::Microsoft.Example.Circuits.CapacitorHasT2> outLinks = new global::System.Collections.Generic.List<global::Microsoft.Example.Circuits.CapacitorHasT2>();
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.CapacitorHasT2> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.CapacitorHasT2>(source, global::Microsoft.Example.Circuits.CapacitorHasT2.CapacitorT2DomainRoleId);
			foreach ( global::Microsoft.Example.Circuits.CapacitorHasT2 link in links )
			{
				if ( target.Equals(link.T2) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CapacitorHasT2 link between a given Capacitorand a ComponentTerminal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Example.Circuits.CapacitorHasT2 GetLink( global::Microsoft.Example.Circuits.Capacitor source, global::Microsoft.Example.Circuits.ComponentTerminal target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.Example.Circuits.CapacitorHasT2> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Example.Circuits.CapacitorHasT2>(source, global::Microsoft.Example.Circuits.CapacitorHasT2.CapacitorT2DomainRoleId);
			foreach ( global::Microsoft.Example.Circuits.CapacitorHasT2 link in links )
			{
				if ( target.Equals(link.T2) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}

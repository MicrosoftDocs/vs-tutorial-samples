//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Microsoft.Example.Circuits
{
	/// <summary>
	/// DomainClass NamedElement
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.NamedElement.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Example.Circuits.NamedElement.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("2a77b731-7725-48c2-ab1c-3f49c65407eb")]
	public abstract partial class NamedElement : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// NamedElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2a77b731, 0x7725, 0x48c2, 0xab, 0x1c, 0x3f, 0x49, 0xc6, 0x54, 0x07, 0xeb);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected NamedElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x15884371, 0xec14, 0x4a60, 0xbf, 0xf5, 0xee, 0x75, 0x31, 0x47, 0x36, 0x53);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.NamedElement/Name.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Example.Circuits.NamedElement/Name.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("15884371-ec14-4a60-bff5-ee7531473653")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NamedElement.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<NamedElement, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NamedElement.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NamedElement.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(NamedElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NamedElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Microsoft.Example.Circuits
{
	/// <summary>
	/// DomainClass ComponentModel
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.ComponentModel.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Example.Circuits.ComponentModel.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("bc91c3f0-c89e-4da2-b731-e641515f33e4")]
	public partial class ComponentModel : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ComponentModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbc91c3f0, 0xc89e, 0x4da2, 0xb7, 0x31, 0xe6, 0x41, 0x51, 0x5f, 0x33, 0xe4);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ComponentModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ComponentModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Comments opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Comments
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(global::Microsoft.Example.Circuits.ComponentModelHasComments.ComponentModelDomainRoleId);
			}
		}
		#endregion
		#region Components opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Components.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Component> Components
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Component>, Component>(global::Microsoft.Example.Circuits.ComponentModelHasComponents.ComponentModelDomainRoleId);
			}
		}
		#endregion
		#region Junctions opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Junctions.
		/// Description for
		/// Microsoft.Example.Circuits.ComponentModelHasJunctions.ComponentModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Junction> Junctions
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Junction>, Junction>(global::Microsoft.Example.Circuits.ComponentModelHasJunctions.ComponentModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Microsoft.Example.Circuits.Junction.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Microsoft.Example.Circuits.Component.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Microsoft.Example.Circuits.Comment.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Microsoft.Example.Circuits.Junction sourceJunction1 = sourceElement as global::Microsoft.Example.Circuits.Junction;
			if (sourceJunction1 != null)
			{
				// Create link for path ComponentModelHasJunctions.Junctions
				this.Junctions.Add(sourceJunction1);

				return;
			}
				
			global::Microsoft.Example.Circuits.Component sourceComponent2 = sourceElement as global::Microsoft.Example.Circuits.Component;
			if (sourceComponent2 != null)
			{
				// Create link for path ComponentModelHasComponents.Components
				this.Components.Add(sourceComponent2);

				return;
			}
				
			global::Microsoft.Example.Circuits.Comment sourceComment3 = sourceElement as global::Microsoft.Example.Circuits.Comment;
			if (sourceComment3 != null)
			{
				// Create link for path ComponentModelHasComments.Comments
				this.Comments.Add(sourceComment3);

				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Microsoft.Example.Circuits.Junction sourceJunction1 = sourceElement as global::Microsoft.Example.Circuits.Junction;
			if (sourceJunction1 != null)
			{
				// Delete link for path ComponentModelHasJunctions.Junctions
				
				foreach (DslModeling::ElementLink link in global::Microsoft.Example.Circuits.ComponentModelHasJunctions.GetLinks((global::Microsoft.Example.Circuits.ComponentModel)this, sourceJunction1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Microsoft.Example.Circuits.ComponentModelHasJunctions.ComponentModelDomainRoleId, global::Microsoft.Example.Circuits.ComponentModelHasJunctions.JunctionDomainRoleId);
				}

				return;
			}
				
			global::Microsoft.Example.Circuits.Component sourceComponent2 = sourceElement as global::Microsoft.Example.Circuits.Component;
			if (sourceComponent2 != null)
			{
				// Delete link for path ComponentModelHasComponents.Components
				
				foreach (DslModeling::ElementLink link in global::Microsoft.Example.Circuits.ComponentModelHasComponents.GetLinks((global::Microsoft.Example.Circuits.ComponentModel)this, sourceComponent2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Microsoft.Example.Circuits.ComponentModelHasComponents.ComponentModelDomainRoleId, global::Microsoft.Example.Circuits.ComponentModelHasComponents.ComponentDomainRoleId);
				}

				return;
			}
				
			global::Microsoft.Example.Circuits.Comment sourceComment3 = sourceElement as global::Microsoft.Example.Circuits.Comment;
			if (sourceComment3 != null)
			{
				// Delete link for path ComponentModelHasComments.Comments
				
				foreach (DslModeling::ElementLink link in global::Microsoft.Example.Circuits.ComponentModelHasComments.GetLinks((global::Microsoft.Example.Circuits.ComponentModel)this, sourceComment3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Microsoft.Example.Circuits.ComponentModelHasComments.ComponentModelDomainRoleId, global::Microsoft.Example.Circuits.ComponentModelHasComments.CommentDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Microsoft.Example.Circuits
{
	/// <summary>
	/// DomainClass Component
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.Component.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Example.Circuits.Component.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d67e018c-d2cd-4a79-8dbe-455708d95d71")]
	public abstract partial class Component : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Component domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd67e018c, 0xd2cd, 0x4a79, 0x8d, 0xbe, 0x45, 0x57, 0x08, 0xd9, 0x5d, 0x71);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected Component(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Polarity domain property code
		
		/// <summary>
		/// Polarity domain property Id.
		/// </summary>
		public static readonly global::System.Guid PolarityDomainPropertyId = new global::System.Guid(0x590619df, 0x9ac5, 0x455a, 0xa1, 0xdb, 0x50, 0x12, 0x85, 0x55, 0x2c, 0xc1);
		
		/// <summary>
		/// Storage for Polarity
		/// </summary>
		private global::System.Boolean polarityPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Polarity domain property.
		/// Description for Microsoft.Example.Circuits.Component.Polarity
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.Component/Polarity.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Example.Circuits.Component/Polarity.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("590619df-9ac5-455a-a1db-501285552cc1")]
		public global::System.Boolean Polarity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return polarityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PolarityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Component.Polarity domain property.
		/// </summary>
		internal sealed partial class PolarityPropertyHandler : DslModeling::DomainPropertyValueHandler<Component, global::System.Boolean>
		{
			private PolarityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Component.Polarity domain property value handler.
			/// </summary>
			public static readonly PolarityPropertyHandler Instance = new PolarityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Component.Polarity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PolarityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Component element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.polarityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Component element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.polarityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ComponentModel opposite domain role accessor
		/// <summary>
		/// Gets or sets ComponentModel.
		/// </summary>
		public virtual ComponentModel ComponentModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.Example.Circuits.ComponentModelHasComponents.ComponentDomainRoleId) as ComponentModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.Example.Circuits.ComponentModelHasComponents.ComponentDomainRoleId, value);
			}
		}
		#endregion
		#region ComponentTerminals opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ComponentTerminals.
		/// Description for
		/// Microsoft.Example.Circuits.ComponentHasComponentTerminal.Component
		/// </summary>
		public virtual DslModeling::ReadOnlyLinkedElementCollection<ComponentTerminal> ComponentTerminals
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::ReadOnlyLinkedElementCollection<ComponentTerminal>, ComponentTerminal>(global::Microsoft.Example.Circuits.ComponentHasComponentTerminal.ComponentDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Microsoft.Example.Circuits.Comment.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Microsoft.Example.Circuits.Comment sourceComment1 = sourceElement as global::Microsoft.Example.Circuits.Comment;
			if (sourceComment1 != null)
			{
				// Create link for path ComponentModelHasComponents.ComponentModel/!ComponentModel/ComponentModelHasComments.Comments
						// Segments 0 and 1
						global::Microsoft.Example.Circuits.ComponentModel commentHost0 = this.ComponentModel;
						if ( commentHost0 == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'ComponentModelHasComponents.ComponentModel/!ComponentModel/ComponentModelHasComments.Comments'.");
				commentHost0.Comments.Add(sourceComment1);

				// Create link for path CommentsReferenceComponents.Comments
				global::Microsoft.Example.Circuits.CommentsReferenceComponents.GetComments((global::Microsoft.Example.Circuits.Component)this).Add(sourceComment1);

				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Microsoft.Example.Circuits.Comment sourceComment1 = sourceElement as global::Microsoft.Example.Circuits.Comment;
			if (sourceComment1 != null)
			{
				// Delete link for path ComponentModelHasComponents.ComponentModel/!ComponentModel/ComponentModelHasComments.Comments
					// Segments 0 and 1
					global::Microsoft.Example.Circuits.ComponentModel commentHost0 = this.ComponentModel;
					if ( commentHost0 == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'ComponentModelHasComponents.ComponentModel/!ComponentModel/ComponentModelHasComments.Comments'.");
				
				foreach (DslModeling::ElementLink link in global::Microsoft.Example.Circuits.ComponentModelHasComments.GetLinks((global::Microsoft.Example.Circuits.ComponentModel)commentHost0, sourceComment1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Microsoft.Example.Circuits.ComponentModelHasComments.ComponentModelDomainRoleId, global::Microsoft.Example.Circuits.ComponentModelHasComments.CommentDomainRoleId);
				}

				// Delete link for path CommentsReferenceComponents.Comments
				
				foreach (DslModeling::ElementLink link in global::Microsoft.Example.Circuits.CommentsReferenceComponents.GetLinks(sourceComment1, (global::Microsoft.Example.Circuits.Component)this))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Microsoft.Example.Circuits.CommentsReferenceComponents.SubjectDomainRoleId, global::Microsoft.Example.Circuits.CommentsReferenceComponents.CommentDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Microsoft.Example.Circuits
{
	/// <summary>
	/// DomainClass Connection
	/// Description for Microsoft.Example.Circuits.Connection
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.Connection.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Example.Circuits.Connection.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("20d71e1d-233a-4d51-a624-17e5872e8ab1")]
	public abstract partial class Connection : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Connection domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x20d71e1d, 0x233a, 0x4d51, 0xa6, 0x24, 0x17, 0xe5, 0x87, 0x2e, 0x8a, 0xb1);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected Connection(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TargetConnections opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TargetConnections.
		/// Description for Microsoft.Example.Circuits.Wire.SourceConnection
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Connection> TargetConnections
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Connection>, Connection>(global::Microsoft.Example.Circuits.Wire.SourceConnectionDomainRoleId);
			}
		}
		#endregion
		#region SourceConnections opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SourceConnections.
		/// Description for Microsoft.Example.Circuits.Wire.TargetConnection
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Connection> SourceConnections
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Connection>, Connection>(global::Microsoft.Example.Circuits.Wire.TargetConnectionDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Microsoft.Example.Circuits
{
	/// <summary>
	/// DomainClass Comment
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.Comment.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Example.Circuits.Comment.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("53311b53-3109-4791-84b7-653e18747cac")]
	public partial class Comment : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Comment domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x53311b53, 0x3109, 0x4791, 0x84, 0xb7, 0x65, 0x3e, 0x18, 0x74, 0x7c, 0xac);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Comment(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Comment(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Text domain property code
		
		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0xa0c1ec6d, 0x25ab, 0x41e7, 0x95, 0x61, 0x97, 0x6c, 0xd0, 0xdd, 0x4c, 0x91);
		
		/// <summary>
		/// Storage for Text
		/// </summary>
		private global::System.String textPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.Comment/Text.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Example.Circuits.Comment/Text.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("a0c1ec6d-25ab-41e7-9561-976cd0dd4c91")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Comment.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<Comment, global::System.String>
		{
			private TextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Comment.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Comment.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Comment element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Comment element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ComponentModel opposite domain role accessor
		/// <summary>
		/// Gets or sets ComponentModel.
		/// </summary>
		public virtual ComponentModel ComponentModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.Example.Circuits.ComponentModelHasComments.CommentDomainRoleId) as ComponentModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.Example.Circuits.ComponentModelHasComments.CommentDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Microsoft.Example.Circuits
{
	/// <summary>
	/// DomainClass Resistor
	/// Description for Microsoft.Example.Circuits.Resistor
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.Resistor.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Example.Circuits.Resistor.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("550dfd7a-86c2-417f-bbdc-38a13581d3b8")]
	public partial class Resistor : Component
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Resistor domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x550dfd7a, 0x86c2, 0x417f, 0xbb, 0xdc, 0x38, 0xa1, 0x35, 0x81, 0xd3, 0xb8);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Resistor(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Resistor(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Resistance domain property code
		
		/// <summary>
		/// Resistance domain property Id.
		/// </summary>
		public static readonly global::System.Guid ResistanceDomainPropertyId = new global::System.Guid(0xaa0bd9da, 0xedc2, 0x48c9, 0xb3, 0x41, 0xe4, 0xd2, 0x4f, 0xd3, 0x77, 0xf5);
		
		/// <summary>
		/// Storage for Resistance
		/// </summary>
		private global::System.String resistancePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Resistance domain property.
		/// Description for Microsoft.Example.Circuits.Resistor.Resistance
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.Resistor/Resistance.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Example.Circuits.Resistor/Resistance.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("aa0bd9da-edc2-48c9-b341-e4d24fd377f5")]
		public global::System.String Resistance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return resistancePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ResistancePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Resistor.Resistance domain property.
		/// </summary>
		internal sealed partial class ResistancePropertyHandler : DslModeling::DomainPropertyValueHandler<Resistor, global::System.String>
		{
			private ResistancePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Resistor.Resistance domain property value handler.
			/// </summary>
			public static readonly ResistancePropertyHandler Instance = new ResistancePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Resistor.Resistance domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ResistanceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Resistor element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.resistancePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Resistor element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.resistancePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region T1 opposite domain role accessor
		/// <summary>
		/// Gets or sets T1.
		/// PropagateCopy is set to copy terminals.
		/// </summary>
		public virtual ComponentTerminal T1
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.Example.Circuits.ResistorHasT1.ResistorDomainRoleId) as ComponentTerminal;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.Example.Circuits.ResistorHasT1.ResistorDomainRoleId, value);
			}
		}
		#endregion
		#region T2 opposite domain role accessor
		/// <summary>
		/// Gets or sets T2.
		/// PropagateCopy is set to copy terminals.
		/// </summary>
		public virtual ComponentTerminal T2
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.Example.Circuits.ResistorHasT2.R2DomainRoleId) as ComponentTerminal;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.Example.Circuits.ResistorHasT2.R2DomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Microsoft.Example.Circuits
{
	/// <summary>
	/// DomainClass ComponentTerminal
	/// Description for Microsoft.Example.Circuits.ComponentTerminal
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.ComponentTerminal.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Example.Circuits.ComponentTerminal.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("97b0c926-082e-4d29-8980-502a3b6d9811")]
	public partial class ComponentTerminal : Connection
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ComponentTerminal domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x97b0c926, 0x082e, 0x4d29, 0x89, 0x80, 0x50, 0x2a, 0x3b, 0x6d, 0x98, 0x11);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ComponentTerminal(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ComponentTerminal(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Component opposite domain role accessor
		/// <summary>
		/// Gets or sets Component.
		/// Description for
		/// Microsoft.Example.Circuits.ComponentHasComponentTerminal.ComponentTerminal
		/// </summary>
		public virtual Component Component
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.Example.Circuits.ComponentHasComponentTerminal.ComponentTerminalDomainRoleId) as Component;
			}
		}
		#endregion
		#region R1 opposite domain role accessor
		/// <summary>
		/// Gets or sets R1.
		/// Description for Microsoft.Example.Circuits.ResistorHasT1.T1
		/// </summary>
		public virtual Resistor R1
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.Example.Circuits.ResistorHasT1.T1DomainRoleId) as Resistor;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.Example.Circuits.ResistorHasT1.T1DomainRoleId, value);
			}
		}
		#endregion
		#region R2 opposite domain role accessor
		/// <summary>
		/// Gets or sets R2.
		/// Description for Microsoft.Example.Circuits.ResistorHasT2.T2
		/// </summary>
		public virtual Resistor R2
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.Example.Circuits.ResistorHasT2.T2DomainRoleId) as Resistor;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.Example.Circuits.ResistorHasT2.T2DomainRoleId, value);
			}
		}
		#endregion
		#region BaseOfTransistor opposite domain role accessor
		/// <summary>
		/// Gets or sets BaseOfTransistor.
		/// Description for Microsoft.Example.Circuits.TransistorHasBase.Base
		/// </summary>
		public virtual Transistor BaseOfTransistor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.Example.Circuits.TransistorHasBase.BaseDomainRoleId) as Transistor;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.Example.Circuits.TransistorHasBase.BaseDomainRoleId, value);
			}
		}
		#endregion
		#region CollectorOfTransistor opposite domain role accessor
		/// <summary>
		/// Gets or sets CollectorOfTransistor.
		/// Description for Microsoft.Example.Circuits.TransistorHasCollector.Collector
		/// </summary>
		public virtual Transistor CollectorOfTransistor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.Example.Circuits.TransistorHasCollector.CollectorDomainRoleId) as Transistor;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.Example.Circuits.TransistorHasCollector.CollectorDomainRoleId, value);
			}
		}
		#endregion
		#region EmitterOfTransistor opposite domain role accessor
		/// <summary>
		/// Gets or sets EmitterOfTransistor.
		/// Description for Microsoft.Example.Circuits.TransistorHasEmitter.Emitter
		/// </summary>
		public virtual Transistor EmitterOfTransistor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.Example.Circuits.TransistorHasEmitter.EmitterDomainRoleId) as Transistor;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.Example.Circuits.TransistorHasEmitter.EmitterDomainRoleId, value);
			}
		}
		#endregion
		#region CapacitorT1 opposite domain role accessor
		/// <summary>
		/// Gets or sets CapacitorT1.
		/// Description for Microsoft.Example.Circuits.CapacitorHasT1.T1
		/// </summary>
		public virtual Capacitor CapacitorT1
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.Example.Circuits.CapacitorHasT1.T1DomainRoleId) as Capacitor;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.Example.Circuits.CapacitorHasT1.T1DomainRoleId, value);
			}
		}
		#endregion
		#region CapacitorT2 opposite domain role accessor
		/// <summary>
		/// Gets or sets CapacitorT2.
		/// Description for Microsoft.Example.Circuits.CapacitorHasT2.T2
		/// </summary>
		public virtual Capacitor CapacitorT2
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.Example.Circuits.CapacitorHasT2.T2DomainRoleId) as Capacitor;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.Example.Circuits.CapacitorHasT2.T2DomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Microsoft.Example.Circuits.Comment.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Gets the ModelElement to be used as the target for the ElementGroupPrototype merge 
		/// process.  
		/// This is called by the merge process when this element is the target of the merge.  
		/// This provides this element with the opportunity to forward the target to something 
		/// other than itself.
		/// </summary>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that will be reconstituted and merged with the target element.</param>
		/// <returns>The ModelElement to use as the target for the merge process.</returns>
		protected override DslModeling::ModelElement ChooseMergeTarget(DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
		
			if (elementGroupPrototype.RootProtoElements.Count > 0)
			{
				// We choose to assume that the first rootProtoElement is representative of the set
				DslModeling::ProtoElementBase rootProtoElement = elementGroupPrototype.RootProtoElements[0];
				DslModeling::DomainClassInfo classInfo;
				classInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootProtoElement.DomainClassId);
				
				if (classInfo.IsDerivedFrom(global::Microsoft.Example.Circuits.Comment.DomainClassId))
				
				{
					// Find Target by traversing path ComponentHasComponentTerminal.Component/!Component
							// Segments 0 and 1
							global::Microsoft.Example.Circuits.Component commentTarget = this.Component;
							if ( commentTarget == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'ComponentHasComponentTerminal.Component/!Component'.");
					return commentTarget;
				}
			}
			return this;
		}
		
		/// <summary>
		/// Gets the ModelElement to be used as the target for the ElementGroup merge 
		/// process.  
		/// This is called by the merge process when this element is the target of the merge.  
		/// This provides this element with the opportunity to forward the target to something 
		/// other than itself.
		/// </summary>
		/// <param name="elementGroup">The ElementGroup that will be merged with the target element.</param>
		/// <returns>The ModelElement to use as the target for the merge process.</returns>
		protected override DslModeling::ModelElement ChooseMergeTarget(DslModeling::ElementGroup elementGroup)
		{
			if ( elementGroup == null ) throw new global::System.ArgumentNullException("elementGroup");
		
			if (elementGroup.RootElements.Count > 0)
			{
				// We choose to assume that the first rootProtoElement is representative of the set
				DslModeling::ModelElement rootElement = elementGroup.RootElements[0];
				DslModeling::DomainClassInfo classInfo;
				classInfo = rootElement.GetDomainClass();
				
				if (classInfo.IsDerivedFrom(global::Microsoft.Example.Circuits.Comment.DomainClassId))
			
				{
					// Find Target by traversing path ComponentHasComponentTerminal.Component/!Component
							// Segments 0 and 1
							global::Microsoft.Example.Circuits.Component commentTarget = this.Component;
							if ( commentTarget == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'ComponentHasComponentTerminal.Component/!Component'.");
					return commentTarget;
				}
			}
			return this;
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Microsoft.Example.Circuits.Comment sourceComment1 = sourceElement as global::Microsoft.Example.Circuits.Comment;
			if (sourceComment1 != null)
			{
				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Microsoft.Example.Circuits.Comment sourceComment1 = sourceElement as global::Microsoft.Example.Circuits.Comment;
			if (sourceComment1 != null)
			{
				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Microsoft.Example.Circuits
{
	/// <summary>
	/// DomainClass Junction
	/// Description for Microsoft.Example.Circuits.Junction
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.Junction.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Example.Circuits.Junction.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("166b94ea-0aaa-48ee-8f05-bb946841800f")]
	public partial class Junction : Connection
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Junction domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x166b94ea, 0x0aaa, 0x48ee, 0x8f, 0x05, 0xbb, 0x94, 0x68, 0x41, 0x80, 0x0f);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Junction(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Junction(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ComponentModel opposite domain role accessor
		/// <summary>
		/// Gets or sets ComponentModel.
		/// Description for Microsoft.Example.Circuits.ComponentModelHasJunctions.Junction
		/// </summary>
		public virtual ComponentModel ComponentModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.Example.Circuits.ComponentModelHasJunctions.JunctionDomainRoleId) as ComponentModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.Example.Circuits.ComponentModelHasJunctions.JunctionDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Microsoft.Example.Circuits
{
	/// <summary>
	/// DomainClass Transistor
	/// Description for Microsoft.Example.Circuits.Transistor
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.Transistor.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Example.Circuits.Transistor.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("204097fe-b184-43e4-86ec-2c3b312800e3")]
	public partial class Transistor : Component
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Transistor domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x204097fe, 0xb184, 0x43e4, 0x86, 0xec, 0x2c, 0x3b, 0x31, 0x28, 0x00, 0xe3);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Transistor(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Transistor(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Gain domain property code
		
		/// <summary>
		/// Gain domain property Id.
		/// </summary>
		public static readonly global::System.Guid GainDomainPropertyId = new global::System.Guid(0x96ef7372, 0x9d48, 0x4e48, 0xa9, 0xf3, 0x9f, 0x43, 0x6c, 0x77, 0xc5, 0x14);
		
		/// <summary>
		/// Storage for Gain
		/// </summary>
		private global::System.Int16 gainPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Gain domain property.
		/// Description for Microsoft.Example.Circuits.Transistor.Gain
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.Transistor/Gain.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Example.Circuits.Transistor/Gain.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("96ef7372-9d48-4e48-a9f3-9f436c77c514")]
		public global::System.Int16 Gain
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return gainPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				GainPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Transistor.Gain domain property.
		/// </summary>
		internal sealed partial class GainPropertyHandler : DslModeling::DomainPropertyValueHandler<Transistor, global::System.Int16>
		{
			private GainPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Transistor.Gain domain property value handler.
			/// </summary>
			public static readonly GainPropertyHandler Instance = new GainPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Transistor.Gain domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return GainDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int16 GetValue(Transistor element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.gainPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Transistor element, global::System.Int16 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int16 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.gainPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Base opposite domain role accessor
		/// <summary>
		/// Gets or sets Base.
		/// PropagateCopy is set to copy terminals.
		/// </summary>
		public virtual ComponentTerminal Base
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.Example.Circuits.TransistorHasBase.BaseOfTransistorDomainRoleId) as ComponentTerminal;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.Example.Circuits.TransistorHasBase.BaseOfTransistorDomainRoleId, value);
			}
		}
		#endregion
		#region Collector opposite domain role accessor
		/// <summary>
		/// Gets or sets Collector.
		/// PropagateCopy is set to copy terminals.
		/// </summary>
		public virtual ComponentTerminal Collector
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.Example.Circuits.TransistorHasCollector.CollectorOfTransistorDomainRoleId) as ComponentTerminal;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.Example.Circuits.TransistorHasCollector.CollectorOfTransistorDomainRoleId, value);
			}
		}
		#endregion
		#region Emitter opposite domain role accessor
		/// <summary>
		/// Gets or sets Emitter.
		/// PropagateCopy is set to copy terminals.
		/// </summary>
		public virtual ComponentTerminal Emitter
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.Example.Circuits.TransistorHasEmitter.EmitterOfTransistorDomainRoleId) as ComponentTerminal;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.Example.Circuits.TransistorHasEmitter.EmitterOfTransistorDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Microsoft.Example.Circuits.ComponentTerminal.DomainClassId)) 
				{
					// Check that creating a link with this path doesn't cause multiplicity overflow: TransistorHasBase.Base
					if (this.Base != null)
					{
						return false;
					}
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Microsoft.Example.Circuits.ComponentTerminal sourceComponentTerminal1 = sourceElement as global::Microsoft.Example.Circuits.ComponentTerminal;
			if (sourceComponentTerminal1 != null)
			{
				// Create link for path TransistorHasBase.Base
				this.Base = sourceComponentTerminal1;

				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Microsoft.Example.Circuits.ComponentTerminal sourceComponentTerminal1 = sourceElement as global::Microsoft.Example.Circuits.ComponentTerminal;
			if (sourceComponentTerminal1 != null)
			{
				// Delete link for path TransistorHasBase.Base
				
				foreach (DslModeling::ElementLink link in global::Microsoft.Example.Circuits.TransistorHasBase.GetLinks((global::Microsoft.Example.Circuits.Transistor)this, sourceComponentTerminal1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Microsoft.Example.Circuits.TransistorHasBase.BaseOfTransistorDomainRoleId, global::Microsoft.Example.Circuits.TransistorHasBase.BaseDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Microsoft.Example.Circuits
{
	/// <summary>
	/// DomainClass Capacitor
	/// Description for Microsoft.Example.Circuits.Capacitor
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.Capacitor.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Example.Circuits.Capacitor.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c86f6ea3-ac06-46ce-aee4-6d23b261157e")]
	public partial class Capacitor : Component
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Capacitor domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc86f6ea3, 0xac06, 0x46ce, 0xae, 0xe4, 0x6d, 0x23, 0xb2, 0x61, 0x15, 0x7e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Capacitor(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Capacitor(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsPolar domain property code
		
		/// <summary>
		/// IsPolar domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsPolarDomainPropertyId = new global::System.Guid(0xd524c96d, 0xf6ea, 0x4570, 0x88, 0x9f, 0x65, 0x8a, 0xb4, 0x2a, 0x47, 0x94);
		
		/// <summary>
		/// Storage for IsPolar
		/// </summary>
		private global::System.Boolean isPolarPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsPolar domain property.
		/// Description for Microsoft.Example.Circuits.Capacitor.Is Polar
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.Capacitor/IsPolar.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Example.Circuits.Capacitor/IsPolar.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d524c96d-f6ea-4570-889f-658ab42a4794")]
		public global::System.Boolean IsPolar
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isPolarPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsPolarPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Capacitor.IsPolar domain property.
		/// </summary>
		internal sealed partial class IsPolarPropertyHandler : DslModeling::DomainPropertyValueHandler<Capacitor, global::System.Boolean>
		{
			private IsPolarPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Capacitor.IsPolar domain property value handler.
			/// </summary>
			public static readonly IsPolarPropertyHandler Instance = new IsPolarPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Capacitor.IsPolar domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsPolarDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Capacitor element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isPolarPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Capacitor element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isPolarPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Capacitance domain property code
		
		/// <summary>
		/// Capacitance domain property Id.
		/// </summary>
		public static readonly global::System.Guid CapacitanceDomainPropertyId = new global::System.Guid(0xde56ccfa, 0x4371, 0x403c, 0x9a, 0xb8, 0x94, 0x7c, 0xd6, 0x0d, 0xab, 0xc3);
		
		/// <summary>
		/// Storage for Capacitance
		/// </summary>
		private global::System.String capacitancePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Capacitance domain property.
		/// Description for Microsoft.Example.Circuits.Capacitor.Capacitance
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Example.Circuits.Capacitor/Capacitance.DisplayName", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Example.Circuits.Capacitor/Capacitance.Description", typeof(global::Microsoft.Example.Circuits.CircuitsDomainModel), "Microsoft.Example.Circuits.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("de56ccfa-4371-403c-9ab8-947cd60dabc3")]
		public global::System.String Capacitance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return capacitancePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CapacitancePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Capacitor.Capacitance domain property.
		/// </summary>
		internal sealed partial class CapacitancePropertyHandler : DslModeling::DomainPropertyValueHandler<Capacitor, global::System.String>
		{
			private CapacitancePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Capacitor.Capacitance domain property value handler.
			/// </summary>
			public static readonly CapacitancePropertyHandler Instance = new CapacitancePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Capacitor.Capacitance domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CapacitanceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Capacitor element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.capacitancePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Capacitor element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.capacitancePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region T1 opposite domain role accessor
		/// <summary>
		/// Gets or sets T1.
		/// PropagateCopy is set to copy terminals.
		/// </summary>
		public virtual ComponentTerminal T1
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.Example.Circuits.CapacitorHasT1.CapacitorT1DomainRoleId) as ComponentTerminal;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.Example.Circuits.CapacitorHasT1.CapacitorT1DomainRoleId, value);
			}
		}
		#endregion
		#region T2 opposite domain role accessor
		/// <summary>
		/// Gets or sets T2.
		/// PropagateCopy is set to copy terminals.
		/// </summary>
		public virtual ComponentTerminal T2
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.Example.Circuits.CapacitorHasT2.CapacitorT2DomainRoleId) as ComponentTerminal;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.Example.Circuits.CapacitorHasT2.CapacitorT2DomainRoleId, value);
			}
		}
		#endregion
	}
}
